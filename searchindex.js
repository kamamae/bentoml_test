Search.setIndex({"alltitles": {"(Maximum inner-product search)": [[124, "maximum-inner-product-search"]], "0. Installation": [[121, "installation"], [122, "installation"], [134, "installation"], [135, "installation"], [136, "installation"]], "0. Preparation": [[125, "preparation"], [131, "preparation"], [140, "preparation"], [141, "preparation"], [142, "preparation"]], "0. Setup": [[138, "setup"]], "1. BAAI General Embedding": [[120, "baai-general-embedding"]], "1. BGE-M3 structure": [[122, "bge-m3-structure"]], "1. Background": [[119, "background"]], "1. Data": [[140, "data"], [141, "data"], [142, "data"]], "1. Dataset": [[138, "dataset"]], "1. Datasets": [[136, "datasets"]], "1. Embedding": [[118, null]], "1. Encode sentences": [[121, "encode-sentences"]], "1. Flat Index": [[131, "flat-index"]], "1. IndexFlat*": [[129, "indexflat"]], "1. Installation": [[128, "installation"]], "1. Intro": [[134, "intro"]], "1. Jaccard Similarity": [[124, "jaccard-similarity"]], "1. Recall": [[125, "recall"]], "1. Run the Evaluation": [[135, "run-the-evaluation"]], "1. Scalar Quantizer": [[130, "scalar-quantizer"]], "2. BGE Series Models": [[120, "bge-series-models"]], "2. Comparison": [[121, "comparison"]], "2. Data Preparation": [[128, "data-preparation"]], "2. Embedding": [[138, "embedding"]], "2. Euclidean Distance": [[124, "euclidean-distance"]], "2. IVF Index": [[131, "ivf-index"]], "2. IndexIVF*": [[129, "indexivf"]], "2. Indexing": [[140, "indexing"], [141, "indexing"], [142, "indexing"]], "2. MRR": [[125, "mrr"]], "2. Metrics": [[123, null]], "2. Model": [[136, "model"]], "2. Multi-Functionality": [[122, "multi-functionality"]], "2. Product Quantizer": [[130, "product-quantizer"]], "2. Submit to MTEB Leaderboard": [[135, "submit-to-mteb-leaderboard"]], "2.1 BGE": [[120, "bge"]], "2.1 Dense Retrieval": [[122, "dense-retrieval"]], "2.2 BGE v1.5": [[120, "bge-v1-5"]], "2.2 Sparse Retrieval": [[122, "sparse-retrieval"]], "2.3 LLM-Embedder": [[120, "llm-embedder"]], "2.3 Multi-Vector": [[122, "multi-vector"]], "2.4 BGE M3": [[120, "bge-m3"]], "2.4 Hybrid Ranking": [[122, "hybrid-ranking"]], "3. Cosine Similarity": [[124, "cosine-similarity"]], "3. Create Index on CPU": [[128, "create-index-on-cpu"]], "3. Evaluate": [[136, "evaluate"]], "3. HNSW Index": [[131, "hnsw-index"]], "3. IndexHNSW*": [[129, "indexhnsw"]], "3. Indexing": [[126, null], [138, "indexing"]], "3. Partially Evaluate": [[135, "partially-evaluate"]], "3. Retreive and Generate": [[141, "retreive-and-generate"]], "3. Retrieve and Generate": [[140, "retrieve-and-generate"], [142, "retrieve-and-generate"]], "3. nDCG": [[125, "ndcg"]], "3.1 Naive Approach": [[124, "naive-approach"]], "3.2 PyTorch Implementation": [[124, "pytorch-implementation"]], "3.3 PyTorch Function Call": [[124, "pytorch-function-call"]], "4. Build GPU Index and Search": [[128, "build-gpu-index-and-search"]], "4. Evaluation": [[132, null]], "4. Future Work": [[135, "future-work"]], "4. IndexLSH": [[129, "indexlsh"]], "4. Inner Product/Dot Product": [[124, "inner-product-dot-product"]], "4. LSH": [[131, "lsh"]], "4. Precision": [[125, "precision"]], "4. Retrieval": [[138, "retrieval"]], "4. Submit to MTEB Leaderboard": [[136, "submit-to-mteb-leaderboard"]], "5. Examples": [[124, "examples"]], "5. MAP": [[125, "map"]], "5. Reranking": [[137, null], [138, "reranking"]], "5. Results": [[128, "results"]], "5. Scalar Quantizer Index": [[131, "scalar-quantizer-index"]], "5.1 Recall": [[133, "recall"]], "5.2 MRR": [[133, "mrr"]], "5.3 nDCG": [[133, "ndcg"]], "6. Evaluate": [[138, "evaluate"]], "6. Product Quantizer Index": [[131, "product-quantizer-index"]], "6. RAG": [[139, null]], "6.1 Recall": [[138, "recall"]], "6.2 MRR": [[138, "mrr"]], "6.3 nDCG": [[138, "ndcg"]], "AIR-Bench": [[24, null]], "API": [[90, null]], "AbsArguments": [[9, null], [15, null]], "AbsDataset": [[10, null], [16, null]], "AbsEmbedder": [[21, null]], "AbsEmbedderCollator": [[10, "absembeddercollator"]], "AbsEmbedderModel": [[11, "absembeddermodel"]], "AbsEmbedderSameDatasetCollator": [[10, "absembeddersamedatasetcollator"], [59, "absembeddersamedatasetcollator"]], "AbsEmbedderSameDatasetTrainDataset": [[10, "absembeddersamedatasettraindataset"]], "AbsEmbedderTrainDataset": [[10, "absembeddertraindataset"]], "AbsEmbedderTrainer": [[12, "absembeddertrainer"], [13, "absembeddertrainer"]], "AbsLLMRerankerCollator": [[16, "absllmrerankercollator"]], "AbsLLMRerankerTrainDataset": [[16, "absllmrerankertraindataset"]], "AbsModeling": [[11, null], [17, null]], "AbsReranker": [[22, null]], "AbsRerankerCollator": [[16, "absrerankercollator"]], "AbsRerankerModel": [[17, "absrerankermodel"]], "AbsRerankerTrainDataset": [[16, "absrerankertraindataset"]], "AbsRerankerTrainer": [[18, "absrerankertrainer"], [19, "absrerankertrainer"]], "AbsRunner": [[12, null], [18, null]], "AbsTrainer": [[13, null], [19, null]], "Abstract Class": [[0, null]], "All Available GPUs": [[128, "all-available-gpus"]], "Arguments": [[2, null], [53, null], [58, null], [69, null], [76, null], [81, null]], "BEIR": [[27, null]], "BGE": [[114, "bge"], [115, null], [117, null], [119, "bge"]], "BGE Explanation": [[121, null]], "BGE Series": [[120, null]], "BGE v1 & v1.5": [[114, null]], "BGE-EN-ICL": [[111, null]], "BGE-M3": [[112, null], [122, null]], "BGE-Reranker": [[113, null]], "BGE-v1.5": [[114, "bge-v1-5"]], "Base": [[52, null], [64, null], [75, null], [86, null]], "BaseEmbedder": [[94, null], [97, null]], "BaseLLMReranker": [[99, null]], "BaseReranker": [[102, null]], "C-MTEB": [[136, null]], "Choosing Index": [[131, null]], "Commercial Models": [[119, "commercial-models"]], "Community": [[116, null]], "Concept": [[106, null]], "Dataset": [[59, null], [131, "dataset"]], "Decoder Only": [[51, null], [74, null]], "DecoderOnlyEmbedderICLSameDatasetTrainDataset": [[59, "decoderonlyembeddericlsamedatasettraindataset"]], "Dense Retrieval": [[112, "dense-retrieval"]], "Embedder": [[8, null], [50, null], [96, null], [106, "embedder"], [115, null]], "EmbedderOutput": [[11, "embedderoutput"]], "EmbedderTrainerCallbackForDataRefresh": [[10, "embeddertrainercallbackfordatarefresh"]], "Encoder Only": [[63, null], [85, null]], "EncoderOnlyEmbedderM3Model": [[70, "encoderonlyembedderm3model"]], "EncoderOnlyEmbedderM3ModelForInference": [[70, "encoderonlyembedderm3modelforinference"]], "EvalDenseRetriever": [[6, "evaldenseretriever"]], "EvalReranker": [[6, "evalreranker"]], "EvalRetriever": [[6, "evalretriever"]], "Evaluation": [[1, null], [23, null], [133, null]], "Evaluation Metrics": [[125, null]], "Evaluator": [[4, null]], "Example": [[129, "example"], [129, "id3"], [129, "id7"]], "FAQ": [[105, null]], "Faiss GPU": [[128, null]], "Faiss Indexes": [[129, null]], "Faiss Quantizers": [[130, null]], "Finetune": [[7, null], [49, null]], "FlagAutoModel": [[92, null]], "FlagAutoReranker": [[93, null]], "Get Embedding": [[119, "get-embedding"]], "Helper function": [[131, "helper-function"]], "Hybrid Ranking": [[112, "hybrid-ranking"]], "ICL": [[57, null]], "ICLLLMEmbedder": [[95, null]], "Indexing Using Faiss": [[127, null]], "Inference": [[20, null], [91, null]], "Install from sources:": [[108, "install-from-sources"]], "Installation": [[108, null]], "Intro": [[129, "intro"], [129, "id1"], [129, "id4"]], "Intro to Embedding": [[119, null]], "Introduction": [[107, null]], "LayerWiseLLMReranker": [[100, null]], "Layerwise": [[80, null]], "LightweightLLMReranker": [[101, null]], "M3": [[68, null]], "M3Embedder": [[98, null]], "MIRACL": [[32, null]], "MKQA": [[35, null]], "MLDR": [[39, null]], "MSMARCO": [[42, null]], "MTEB": [[45, null], [134, null]], "MTEB Leaderboard": [[135, null]], "Methods": [[3, "methods"], [10, "methods"], [10, "id1"], [10, "id2"], [11, "methods"], [12, "methods"], [13, "methods"], [16, "methods"], [17, "methods"], [18, "methods"], [19, "methods"], [21, "methods"], [22, "methods"], [33, "methods"], [36, "methods"], [40, "methods"], [43, "methods"], [54, "methods"], [59, "methods"], [60, "methods"], [65, "methods"], [70, "methods"], [77, "methods"], [82, "methods"], [87, "methods"], [92, "methods"], [93, "methods"], [94, "methods"], [95, "methods"], [97, "methods"], [98, "methods"], [99, "methods"], [100, "methods"], [101, "methods"], [102, "methods"]], "Modeling": [[54, null], [60, null], [65, null], [70, null], [77, null], [82, null], [87, null]], "Multi-Functionality": [[112, "multi-functionality"]], "Multi-Granularity": [[112, "multi-granularity"]], "Multi-Linguality": [[112, "multi-linguality"]], "Multi-Vector": [[112, "multi-vector"]], "Multiple GPUs": [[128, "multiple-gpus"]], "Open-source Models": [[119, "open-source-models"]], "OpenAI": [[119, "openai"]], "Option 1:": [[128, "option-1"]], "Option 2:": [[128, "option-2"]], "Packages": [[131, "packages"]], "Preparation": [[129, "preparation"], [130, "preparation"]], "Product Quantizer": [[130, "id2"]], "Product Quantizer IVF Index": [[130, "product-quantizer-ivf-index"]], "Product Quantizer Index": [[130, "product-quantizer-index"]], "PyTorch-CUDA": [[108, "pytorch-cuda"]], "Quick Start": [[109, null]], "RAG with LangChain": [[141, null]], "RAG with LlamaIndex": [[142, null]], "Relationship with Cosine similarity": [[124, "relationship-with-cosine-similarity"]], "Reranker": [[14, null], [73, null], [103, null], [106, "reranker"], [138, null]], "RerankerOutput": [[17, "rerankeroutput"]], "Retrieval Demo": [[110, null]], "Runner": [[55, null], [61, null], [66, null], [71, null], [78, null], [83, null], [88, null]], "Scalar Quantizer": [[130, "id1"]], "Scalar Quantizer Index": [[130, "scalar-quantizer-index"]], "Sentence Transformers": [[119, "sentence-transformers"]], "Shortage": [[129, "shortage"], [129, "id6"]], "Similarity": [[124, null]], "Simple RAG From Scratch": [[140, null]], "Single GPU:": [[128, "single-gpu"]], "Sparse Retrieval": [[112, "sparse-retrieval"]], "Step 0: Preparation": [[110, "step-0-preparation"]], "Step 0: Setup": [[127, "step-0-setup"], [133, "step-0-setup"]], "Step 1: Dataset": [[127, "step-1-dataset"]], "Step 1: Load Dataset": [[133, "step-1-load-dataset"]], "Step 1: Text -> Embedding": [[110, "step-1-text-embedding"]], "Step 2: Calculate Similarity": [[110, "step-2-calculate-similarity"]], "Step 2: Embedding": [[133, "step-2-embedding"]], "Step 2: Text Embedding": [[127, "step-2-text-embedding"]], "Step 3.5 (Optional): Saving Faiss index": [[127, "step-3-5-optional-saving-faiss-index"]], "Step 3: Indexing": [[127, "step-3-indexing"], [133, "step-3-indexing"]], "Step 3: Ranking": [[110, "step-3-ranking"]], "Step 4: Evaluate": [[110, "step-4-evaluate"]], "Step 4: Find answers to the query": [[127, "step-4-find-answers-to-the-query"]], "Step 4: Retrieval": [[133, "step-4-retrieval"]], "Step 5: Evaluate": [[133, "step-5-evaluate"]], "Tradeoff": [[129, "tradeoff"], [129, "id2"], [129, "id5"]], "Trainer": [[56, null], [62, null], [67, null], [72, null], [79, null], [84, null], [89, null]], "Tutorials": [[143, null]], "Usage": [[111, "usage"], [112, "usage"], [114, "usage"]], "Using pip:": [[108, "using-pip"]], "Voyage AI": [[119, "voyage-ai"]], "arguments": [[25, null], [28, null], [46, null]], "data loader": [[29, null]], "data_loader": [[33, null], [36, null], [40, null], [43, null]], "dataset loader": [[3, null]], "evaluator": [[30, null], [37, null]], "faiss-cpu": [[127, "faiss-cpu"]], "faiss-gpu on Linux (x86_64)": [[127, "faiss-gpu-on-linux-x86-64"]], "runner": [[5, null], [26, null], [31, null], [34, null], [38, null], [41, null], [44, null], [47, null]], "searcher": [[6, null], [48, null]]}, "docnames": ["API/abc", "API/abc/evaluation", "API/abc/evaluation/arguments", "API/abc/evaluation/data_loader", "API/abc/evaluation/evaluator", "API/abc/evaluation/runner", "API/abc/evaluation/searcher", "API/abc/finetune", "API/abc/finetune/embedder", "API/abc/finetune/embedder/AbsArguments", "API/abc/finetune/embedder/AbsDataset", "API/abc/finetune/embedder/AbsModeling", "API/abc/finetune/embedder/AbsRunner", "API/abc/finetune/embedder/AbsTrainer", "API/abc/finetune/reranker", "API/abc/finetune/reranker/AbsArguments", "API/abc/finetune/reranker/AbsDataset", "API/abc/finetune/reranker/AbsModeling", "API/abc/finetune/reranker/AbsRunner", "API/abc/finetune/reranker/AbsTrainer", "API/abc/inference", "API/abc/inference/AbsEmbedder", "API/abc/inference/AbsReranker", "API/evaluation", "API/evaluation/airbench", "API/evaluation/airbench/arguments", "API/evaluation/airbench/runner", "API/evaluation/beir", "API/evaluation/beir/arguments", "API/evaluation/beir/data_loader", "API/evaluation/beir/evaluator", "API/evaluation/beir/runner", "API/evaluation/miracl", "API/evaluation/miracl/data_loader", "API/evaluation/miracl/runner", "API/evaluation/mkqa", "API/evaluation/mkqa/data_loader", "API/evaluation/mkqa/evaluator", "API/evaluation/mkqa/runner", "API/evaluation/mldr", "API/evaluation/mldr/data_loader", "API/evaluation/mldr/runner", "API/evaluation/msmarco", "API/evaluation/msmarco/data_loader", "API/evaluation/msmarco/runner", "API/evaluation/mteb", "API/evaluation/mteb/arguments", "API/evaluation/mteb/runner", "API/evaluation/mteb/searcher", "API/finetune", "API/finetune/embedder", "API/finetune/embedder/decoder_only", "API/finetune/embedder/decoder_only/base", "API/finetune/embedder/decoder_only/base/arguments", "API/finetune/embedder/decoder_only/base/modeling", "API/finetune/embedder/decoder_only/base/runner", "API/finetune/embedder/decoder_only/base/trainer", "API/finetune/embedder/decoder_only/icl", "API/finetune/embedder/decoder_only/icl/arguments", "API/finetune/embedder/decoder_only/icl/dataset", "API/finetune/embedder/decoder_only/icl/modeling", "API/finetune/embedder/decoder_only/icl/runner", "API/finetune/embedder/decoder_only/icl/trainer", "API/finetune/embedder/encoder_only", "API/finetune/embedder/encoder_only/base", "API/finetune/embedder/encoder_only/base/modeling", "API/finetune/embedder/encoder_only/base/runner", "API/finetune/embedder/encoder_only/base/trainer", "API/finetune/embedder/encoder_only/m3", "API/finetune/embedder/encoder_only/m3/arguments", "API/finetune/embedder/encoder_only/m3/modeling", "API/finetune/embedder/encoder_only/m3/runner", "API/finetune/embedder/encoder_only/m3/trainer", "API/finetune/reranker", "API/finetune/reranker/decoder_only", "API/finetune/reranker/decoder_only/base", "API/finetune/reranker/decoder_only/base/arguments", "API/finetune/reranker/decoder_only/base/modeling", "API/finetune/reranker/decoder_only/base/runner", "API/finetune/reranker/decoder_only/base/trainer", "API/finetune/reranker/decoder_only/layerwise", "API/finetune/reranker/decoder_only/layerwise/arguments", "API/finetune/reranker/decoder_only/layerwise/modeling", "API/finetune/reranker/decoder_only/layerwise/runner", "API/finetune/reranker/decoder_only/layerwise/trainer", "API/finetune/reranker/encoder_only", "API/finetune/reranker/encoder_only/base", "API/finetune/reranker/encoder_only/base/modeling", "API/finetune/reranker/encoder_only/base/runner", "API/finetune/reranker/encoder_only/base/trainer", "API/index", "API/inference", "API/inference/FlagAutoModel", "API/inference/FlagAutoReranker", "API/inference/embedder/decoder_only/BaseLLMEmbedder", "API/inference/embedder/decoder_only/ICLLLMEmbedder", "API/inference/embedder/embedder", "API/inference/embedder/encoder_only/BaseEmbedder", "API/inference/embedder/encoder_only/M3Embedder", "API/inference/reranker/decoder_only/BaseLLMReranker", "API/inference/reranker/decoder_only/LayerWiseLLMReranker", "API/inference/reranker/decoder_only/LightweightLLMReranker", "API/inference/reranker/encoder_only/BaseReranker", "API/inference/reranker/reranker", "C-MTEB", "FAQ/index", "Introduction/concept", "Introduction/index", "Introduction/installation", "Introduction/quick_start", "Introduction/retrieval_demo", "bge/bge_icl", "bge/bge_m3", "bge/bge_reranker", "bge/bge_v1_v1.5", "bge/index", "community/index", "index", "tutorial/1_Embedding", "tutorial/1_Embedding/1.1.1", "tutorial/1_Embedding/1.2.1", "tutorial/1_Embedding/1.2.2", "tutorial/1_Embedding/1.2.3", "tutorial/2_Metrics", "tutorial/2_Metrics/2.1", "tutorial/2_Metrics/2.2", "tutorial/3_Indexing", "tutorial/3_Indexing/3.1.1", "tutorial/3_Indexing/3.1.2", "tutorial/3_Indexing/3.1.3", "tutorial/3_Indexing/3.1.4", "tutorial/3_Indexing/3.1.5", "tutorial/4_Evaluation", "tutorial/4_Evaluation/4.1.1", "tutorial/4_Evaluation/4.2.1", "tutorial/4_Evaluation/4.2.2", "tutorial/4_Evaluation/4.3.1", "tutorial/5_Reranking", "tutorial/5_Reranking/5.1", "tutorial/6_RAG", "tutorial/6_RAG/6.1", "tutorial/6_RAG/6.2", "tutorial/6_RAG/6.3", "tutorial/index"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["API/abc.rst", "API/abc/evaluation.rst", "API/abc/evaluation/arguments.rst", "API/abc/evaluation/data_loader.rst", "API/abc/evaluation/evaluator.rst", "API/abc/evaluation/runner.rst", "API/abc/evaluation/searcher.rst", "API/abc/finetune.rst", "API/abc/finetune/embedder.rst", "API/abc/finetune/embedder/AbsArguments.rst", "API/abc/finetune/embedder/AbsDataset.rst", "API/abc/finetune/embedder/AbsModeling.rst", "API/abc/finetune/embedder/AbsRunner.rst", "API/abc/finetune/embedder/AbsTrainer.rst", "API/abc/finetune/reranker.rst", "API/abc/finetune/reranker/AbsArguments.rst", "API/abc/finetune/reranker/AbsDataset.rst", "API/abc/finetune/reranker/AbsModeling.rst", "API/abc/finetune/reranker/AbsRunner.rst", "API/abc/finetune/reranker/AbsTrainer.rst", "API/abc/inference.rst", "API/abc/inference/AbsEmbedder.rst", "API/abc/inference/AbsReranker.rst", "API/evaluation.rst", "API/evaluation/airbench.rst", "API/evaluation/airbench/arguments.rst", "API/evaluation/airbench/runner.rst", "API/evaluation/beir.rst", "API/evaluation/beir/arguments.rst", "API/evaluation/beir/data_loader.rst", "API/evaluation/beir/evaluator.rst", "API/evaluation/beir/runner.rst", "API/evaluation/miracl.rst", "API/evaluation/miracl/data_loader.rst", "API/evaluation/miracl/runner.rst", "API/evaluation/mkqa.rst", "API/evaluation/mkqa/data_loader.rst", "API/evaluation/mkqa/evaluator.rst", "API/evaluation/mkqa/runner.rst", "API/evaluation/mldr.rst", "API/evaluation/mldr/data_loader.rst", "API/evaluation/mldr/runner.rst", "API/evaluation/msmarco.rst", "API/evaluation/msmarco/data_loader.rst", "API/evaluation/msmarco/runner.rst", "API/evaluation/mteb.rst", "API/evaluation/mteb/arguments.rst", "API/evaluation/mteb/runner.rst", "API/evaluation/mteb/searcher.rst", "API/finetune.rst", "API/finetune/embedder.rst", "API/finetune/embedder/decoder_only.rst", "API/finetune/embedder/decoder_only/base.rst", "API/finetune/embedder/decoder_only/base/arguments.rst", "API/finetune/embedder/decoder_only/base/modeling.rst", "API/finetune/embedder/decoder_only/base/runner.rst", "API/finetune/embedder/decoder_only/base/trainer.rst", "API/finetune/embedder/decoder_only/icl.rst", "API/finetune/embedder/decoder_only/icl/arguments.rst", "API/finetune/embedder/decoder_only/icl/dataset.rst", "API/finetune/embedder/decoder_only/icl/modeling.rst", "API/finetune/embedder/decoder_only/icl/runner.rst", "API/finetune/embedder/decoder_only/icl/trainer.rst", "API/finetune/embedder/encoder_only.rst", "API/finetune/embedder/encoder_only/base.rst", "API/finetune/embedder/encoder_only/base/modeling.rst", "API/finetune/embedder/encoder_only/base/runner.rst", "API/finetune/embedder/encoder_only/base/trainer.rst", "API/finetune/embedder/encoder_only/m3.rst", "API/finetune/embedder/encoder_only/m3/arguments.rst", "API/finetune/embedder/encoder_only/m3/modeling.rst", "API/finetune/embedder/encoder_only/m3/runner.rst", "API/finetune/embedder/encoder_only/m3/trainer.rst", "API/finetune/reranker.rst", "API/finetune/reranker/decoder_only.rst", "API/finetune/reranker/decoder_only/base.rst", "API/finetune/reranker/decoder_only/base/arguments.rst", "API/finetune/reranker/decoder_only/base/modeling.rst", "API/finetune/reranker/decoder_only/base/runner.rst", "API/finetune/reranker/decoder_only/base/trainer.rst", "API/finetune/reranker/decoder_only/layerwise.rst", "API/finetune/reranker/decoder_only/layerwise/arguments.rst", "API/finetune/reranker/decoder_only/layerwise/modeling.rst", "API/finetune/reranker/decoder_only/layerwise/runner.rst", "API/finetune/reranker/decoder_only/layerwise/trainer.rst", "API/finetune/reranker/encoder_only.rst", "API/finetune/reranker/encoder_only/base.rst", "API/finetune/reranker/encoder_only/base/modeling.rst", "API/finetune/reranker/encoder_only/base/runner.rst", "API/finetune/reranker/encoder_only/base/trainer.rst", "API/index.rst", "API/inference.rst", "API/inference/FlagAutoModel.rst", "API/inference/FlagAutoReranker.rst", "API/inference/embedder/decoder_only/BaseLLMEmbedder.rst", "API/inference/embedder/decoder_only/ICLLLMEmbedder.rst", "API/inference/embedder/embedder.rst", "API/inference/embedder/encoder_only/BaseEmbedder.rst", "API/inference/embedder/encoder_only/M3Embedder.rst", "API/inference/reranker/decoder_only/BaseLLMReranker.rst", "API/inference/reranker/decoder_only/LayerWiseLLMReranker.rst", "API/inference/reranker/decoder_only/LightweightLLMReranker.rst", "API/inference/reranker/encoder_only/BaseReranker.rst", "API/inference/reranker/reranker.rst", "C-MTEB.rst", "FAQ/index.rst", "Introduction/concept.rst", "Introduction/index.rst", "Introduction/installation.rst", "Introduction/quick_start.rst", "Introduction/retrieval_demo.ipynb", "bge/bge_icl.rst", "bge/bge_m3.rst", "bge/bge_reranker.rst", "bge/bge_v1_v1.5.rst", "bge/index.rst", "community/index.rst", "index.rst", "tutorial/1_Embedding.rst", "tutorial/1_Embedding/1.1.1.ipynb", "tutorial/1_Embedding/1.2.1.ipynb", "tutorial/1_Embedding/1.2.2.ipynb", "tutorial/1_Embedding/1.2.3.ipynb", "tutorial/2_Metrics.rst", "tutorial/2_Metrics/2.1.ipynb", "tutorial/2_Metrics/2.2.ipynb", "tutorial/3_Indexing.rst", "tutorial/3_Indexing/3.1.1.ipynb", "tutorial/3_Indexing/3.1.2.ipynb", "tutorial/3_Indexing/3.1.3.ipynb", "tutorial/3_Indexing/3.1.4.ipynb", "tutorial/3_Indexing/3.1.5.ipynb", "tutorial/4_Evaluation.rst", "tutorial/4_Evaluation/4.1.1.ipynb", "tutorial/4_Evaluation/4.2.1.ipynb", "tutorial/4_Evaluation/4.2.2.ipynb", "tutorial/4_Evaluation/4.3.1.ipynb", "tutorial/5_Reranking.rst", "tutorial/5_Reranking/5.1.ipynb", "tutorial/6_RAG.rst", "tutorial/6_RAG/6.1.ipynb", "tutorial/6_RAG/6.2.ipynb", "tutorial/6_RAG/6.3.ipynb", "tutorial/index.rst"], "indexentries": {"_colbert_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._colbert_embedding", false]], "_compute_cross_device_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_cross_device_neg_loss", false]], "_compute_in_batch_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_in_batch_neg_loss", false]], "_compute_no_in_batch_neg_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._compute_no_in_batch_neg_loss", false]], "_compute_similarity() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel._compute_similarity", false]], "_compute_similarity() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._compute_similarity", false]], "_concatenate_results_from_multi_process() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder._concatenate_results_from_multi_process", false]], "_create_batch_data() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._create_batch_data", false]], "_create_batch_data() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlsamedatasettraindataset method)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset._create_batch_data", false]], "_dense_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._dense_embedding", false]], "_dist_gather_tensor() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel._dist_gather_tensor", false]], "_encode() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._encode", false]], "_encode_multi_process_worker() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder._encode_multi_process_worker", false]], "_encode_multi_process_worker() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker._encode_multi_process_worker", false]], "_get_file_batch_size() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset static method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._get_file_batch_size", false]], "_get_queries_attention_mask() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._get_queries_attention_mask", false]], "_get_train_group_size() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._get_train_group_size", false]], "_load_dataset() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset._load_dataset", false]], "_load_dataset() (flagembedding.abc.finetune.embedder.absembeddertraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset._load_dataset", false]], "_load_dataset() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset._load_dataset", false]], "_sentence_embedding() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel._sentence_embedding", false]], "_sentence_embedding() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel._sentence_embedding", false]], "_sentence_embedding() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel._sentence_embedding", false]], "_shuffle_text() (flagembedding.abc.finetune.embedder.absembeddertraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset._shuffle_text", false]], "_shuffle_text() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset._shuffle_text", false]], "_sparse_embedding() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model._sparse_embedding", false]], "absembedder (class in flagembedding.abc.inference)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder", false]], "absembeddercollator (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderCollator", false]], "absembedderdataarguments (class in flagembedding.abc.finetune.embedder)": [[15, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderDataArguments", false]], "absembeddermodel (class in flagembedding.abc.finetune.embedder)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel", false]], "absembeddermodelarguments (class in flagembedding.abc.finetune.embedder)": [[15, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModelArguments", false]], "absembedderrunner (class in flagembedding.abc.finetune.embedder)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner", false]], "absembeddersamedatasetcollator (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetCollator", false]], "absembeddersamedatasetcollator (class in flagembedding.finetune.embedder.decoder_only.icl)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.AbsEmbedderSameDatasetCollator", false]], "absembeddersamedatasettraindataset (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset", false]], "absembeddertraindataset (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset", false]], "absembeddertrainer (class in flagembedding.abc.finetune.embedder)": [[13, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer", false]], "absllmrerankercollator (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsLLMRerankerCollator", false]], "absllmrerankertraindataset (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsLLMRerankerTrainDataset", false]], "absreranker (class in flagembedding.abc.inference)": [[22, "FlagEmbedding.abc.inference.AbsReranker", false]], "absrerankercollator (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerCollator", false]], "absrerankerdataarguments (class in flagembedding.abc.finetune.reranker)": [[9, "FlagEmbedding.abc.finetune.reranker.AbsRerankerDataArguments", false]], "absrerankermodel (class in flagembedding.abc.finetune.reranker)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel", false]], "absrerankermodelarguments (class in flagembedding.abc.finetune.reranker)": [[9, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModelArguments", false]], "absrerankerrunner (class in flagembedding.abc.finetune.reranker)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner", false]], "absrerankertraindataset (class in flagembedding.abc.finetune.reranker)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset", false]], "absrerankertrainer (class in flagembedding.abc.finetune.reranker)": [[19, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer", false]], "baseembedder (class in flagembedding.inference.embedder.encoder_only.base)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder", false]], "basellmembedder (class in flagembedding.inference.embedder.decoder_only.base)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder", false]], "basellmreranker (class in flagembedding.inference.reranker.decoder_only.base)": [[99, "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker", false]], "basereranker (class in flagembedding.inference.reranker.encoder_only.base)": [[102, "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker", false]], "bidecoderonlyembeddericlmodel (class in flagembedding.finetune.embedder.decoder_only.icl)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel", false]], "bidecoderonlyembeddermodel (class in flagembedding.finetune.embedder.decoder_only.base)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel", false]], "biencoderonlyembeddermodel (class in flagembedding.finetune.embedder.encoder_only.base)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel", false]], "colbert_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.colbert_score", false]], "compute_colbert_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_colbert_score", false]], "compute_dense_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_dense_score", false]], "compute_lexical_matching_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_lexical_matching_score", false]], "compute_local_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_local_score", false]], "compute_loss() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.embedder.absembeddertrainer method)": [[13, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.compute_loss", false]], "compute_loss() (flagembedding.abc.finetune.reranker.absrerankertrainer method)": [[19, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.compute_loss", false]], "compute_loss() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_loss", false]], "compute_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.compute_score", false]], "compute_score() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.compute_score", false]], "compute_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_score", false]], "compute_score() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score", false]], "compute_score_multi_process() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score_multi_process", false]], "compute_score_single_device() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.compute_score_single_device", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.base.basellmreranker)": [[99, "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.layerwise.layerwisellmreranker)": [[100, "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.decoder_only.lightweight.lightweightllmreranker)": [[101, "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker.compute_score_single_gpu", false]], "compute_score_single_gpu (class in flagembedding.inference.reranker.encoder_only.base.basereranker)": [[102, "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker.compute_score_single_gpu", false]], "compute_score_single_gpu() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.compute_score_single_gpu", false]], "compute_sparse_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.compute_sparse_score", false]], "convert_id_to_token() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.convert_id_to_token", false]], "create_one_example() (flagembedding.abc.finetune.reranker.absrerankertraindataset method)": [[16, "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset.create_one_example", false]], "crossdecodermodel (class in flagembedding.finetune.reranker.decoder_only.base)": [[54, "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel", false]], "crossdecodermodel (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel", false]], "crossencodermodel (class in flagembedding.finetune.reranker.encoder_only.base)": [[87, "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel", false]], "decoderonlyembeddericldataarguments (class in flagembedding.finetune.embedder.decoder_only.icl)": [[58, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLDataArguments", false]], "decoderonlyembeddericlmodelarguments (class in flagembedding.finetune.embedder.decoder_only.icl)": [[58, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLModelArguments", false]], "decoderonlyembeddericlrunner (class in flagembedding.finetune.embedder.decoder_only.icl)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner", false]], "decoderonlyembeddericlsamedatasettraindataset (class in flagembedding.finetune.embedder.decoder_only.icl)": [[59, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset", false]], "decoderonlyembeddericltrainer (class in flagembedding.finetune.embedder.decoder_only.icl)": [[62, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLTrainer", false]], "decoderonlyembeddermodelarguments (class in flagembedding.finetune.embedder.decoder_only.base)": [[53, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderModelArguments", false]], "decoderonlyembedderrunner (class in flagembedding.finetune.embedder.decoder_only.base)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner", false]], "decoderonlyembeddertrainer (class in flagembedding.finetune.embedder.decoder_only.base)": [[79, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderTrainer", false]], "decoderonlyrerankerrunner (class in flagembedding.finetune.reranker.decoder_only.base)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner", false]], "decoderonlyrerankerrunner (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner", false]], "decoderonlyrerankertrainer (class in flagembedding.finetune.reranker.decoder_only.base)": [[56, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerTrainer", false]], "decoderonlyrerankertrainer (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[84, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerTrainer", false]], "default_pooling_method (flagembedding.inference.embedder.decoder_only.base.basellmembedder attribute)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder attribute)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.encoder_only.base.baseembedder attribute)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.DEFAULT_POOLING_METHOD", false]], "default_pooling_method (flagembedding.inference.embedder.encoder_only.m3.m3embedder attribute)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.DEFAULT_POOLING_METHOD", false]], "distill_loss() (flagembedding.abc.finetune.embedder.absembeddermodel static method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.distill_loss", false]], "embedderoutput (class in flagembedding.abc.finetune.embedder)": [[11, "FlagEmbedding.abc.finetune.embedder.EmbedderOutput", false]], "embeddertrainercallbackfordatarefresh (class in flagembedding.abc.finetune.embedder)": [[10, "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh", false]], "enable_input_require_grads() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.enable_input_require_grads", false]], "enable_input_require_grads() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.enable_input_require_grads", false]], "encode() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.encode", false]], "encode() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.encode", false]], "encode() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode", false]], "encode() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.encode", false]], "encode() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.encode", false]], "encode() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.encode", false]], "encode() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.encode", false]], "encode() (flagembedding.finetune.reranker.decoder_only.base.crossdecodermodel method)": [[54, "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel.encode", false]], "encode() (flagembedding.finetune.reranker.decoder_only.layerwise.crossdecodermodel method)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel.encode", false]], "encode() (flagembedding.finetune.reranker.encoder_only.base.crossencodermodel method)": [[87, "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel.encode", false]], "encode() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode", false]], "encode() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode", false]], "encode_corpus() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode_corpus", false]], "encode_corpus() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_corpus", false]], "encode_multi_process() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_multi_process", false]], "encode_multi_process() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.encode_multi_process", false]], "encode_queries() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_queries", false]], "encode_queries() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_queries", false]], "encode_queries_single_device() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_queries_single_device", false]], "encode_single_device() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.decoder_only.base.basellmembedder method)": [[94, "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.encode_single_device", false]], "encode_single_device() (flagembedding.inference.embedder.encoder_only.m3.m3embedder method)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder.encode_single_device", false]], "encoderonlyembedderm3model (class in flagembedding.finetune.embedder.encoder_only.m3)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model", false]], "encoderonlyembedderm3modelarguments (class in flagembedding.finetune.embedder.encoder_only.m3)": [[69, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelArguments", false]], "encoderonlyembedderm3modelforinference (class in flagembedding.finetune.embedder.encoder_only.m3)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference", false]], "encoderonlyembedderm3runner (class in flagembedding.finetune.embedder.encoder_only.m3)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner", false]], "encoderonlyembedderm3trainer (class in flagembedding.finetune.embedder.encoder_only.m3)": [[72, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Trainer", false]], "encoderonlyembedderm3trainingarguments (class in flagembedding.finetune.embedder.encoder_only.m3)": [[69, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3TrainingArguments", false]], "encoderonlyembedderrunner (class in flagembedding.finetune.embedder.encoder_only.base)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner", false]], "encoderonlyembeddertrainer (class in flagembedding.finetune.embedder.encoder_only.base)": [[67, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderTrainer", false]], "encoderonlyrerankerrunner (class in flagembedding.finetune.reranker.encoder_only.base)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner", false]], "encoderonlyrerankertrainer (class in flagembedding.finetune.reranker.encoder_only.base)": [[89, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerTrainer", false]], "ensemble_score() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.ensemble_score", false]], "flagautomodel (class in flagembedding.inference)": [[92, "FlagEmbedding.inference.FlagAutoModel", false]], "flagautoreranker (class in flagembedding.inference)": [[93, "FlagEmbedding.inference.FlagAutoReranker", false]], "forward() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.forward", false]], "forward() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.forward", false]], "forward() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.forward", false]], "forward() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3modelforinference method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference.forward", false]], "forward() (flagembedding.finetune.reranker.decoder_only.layerwise.crossdecodermodel method)": [[82, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel.forward", false]], "from_finetuned() (flagembedding.inference.flagautomodel class method)": [[92, "FlagEmbedding.inference.FlagAutoModel.from_finetuned", false]], "from_finetuned() (flagembedding.inference.flagautoreranker class method)": [[93, "FlagEmbedding.inference.FlagAutoReranker.from_finetuned", false]], "get_detailed_example() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder static method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.get_detailed_example", false]], "get_detailed_inputs() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_detailed_inputs", false]], "get_detailed_instruct() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.get_detailed_instruct", false]], "get_detailed_instruct() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_detailed_instruct", false]], "get_local_score() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.get_local_score", false]], "get_model() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner static method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.get_model", false]], "get_target_devices() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.get_target_devices", false]], "get_target_devices() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.get_target_devices", false]], "gradient_checkpointing_enable() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.gradient_checkpointing_enable", false]], "gradient_checkpointing_enable() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.gradient_checkpointing_enable", false]], "iclllmembedder (class in flagembedding.inference.embedder.decoder_only.icl)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder", false]], "layerwisellmreranker (class in flagembedding.inference.reranker.decoder_only.layerwise)": [[100, "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker", false]], "lightweightllmreranker (class in flagembedding.inference.reranker.decoder_only.lightweight)": [[101, "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker", false]], "load_data_collator() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_data_collator", false]], "load_data_collator() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_data_collator", false]], "load_tokenizer_and_model() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.encoder_only.base.encoderonlyembedderrunner method)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_tokenizer_and_model() (flagembedding.finetune.reranker.encoder_only.base.encoderonlyrerankerrunner method)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner.load_tokenizer_and_model", false]], "load_train_dataset() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_train_dataset", false]], "load_train_dataset() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_train_dataset", false]], "load_train_dataset() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_train_dataset", false]], "load_trainer() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.encoder_only.base.encoderonlyembedderrunner method)": [[66, "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3runner method)": [[71, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.load_trainer", false]], "load_trainer() (flagembedding.finetune.reranker.encoder_only.base.encoderonlyrerankerrunner method)": [[88, "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner.load_trainer", false]], "m3embedder (class in flagembedding.inference.embedder.encoder_only.m3)": [[98, "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder", false]], "on_epoch_end() (flagembedding.abc.finetune.embedder.embeddertrainercallbackfordatarefresh method)": [[10, "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh.on_epoch_end", false]], "pooling() (flagembedding.inference.embedder.encoder_only.base.baseembedder method)": [[97, "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder.pooling", false]], "refresh_epoch() (flagembedding.abc.finetune.embedder.absembeddersamedatasettraindataset method)": [[10, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset.refresh_epoch", false]], "rerankermodelarguments (class in flagembedding.finetune.reranker.decoder_only.base)": [[76, "FlagEmbedding.finetune.reranker.decoder_only.base.RerankerModelArguments", false]], "rerankermodelarguments (class in flagembedding.finetune.reranker.decoder_only.layerwise)": [[81, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.RerankerModelArguments", false]], "rerankeroutput (class in flagembedding.abc.finetune.reranker)": [[17, "FlagEmbedding.abc.finetune.reranker.RerankerOutput", false]], "run() (flagembedding.abc.finetune.embedder.absembedderrunner method)": [[12, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner.run", false]], "run() (flagembedding.abc.finetune.reranker.absrerankerrunner method)": [[18, "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner.run", false]], "run() (flagembedding.finetune.embedder.decoder_only.base.decoderonlyembedderrunner method)": [[78, "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner.run", false]], "run() (flagembedding.finetune.embedder.decoder_only.icl.decoderonlyembeddericlrunner method)": [[61, "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner.run", false]], "run() (flagembedding.finetune.reranker.decoder_only.base.decoderonlyrerankerrunner method)": [[55, "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner.run", false]], "run() (flagembedding.finetune.reranker.decoder_only.layerwise.decoderonlyrerankerrunner method)": [[83, "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner.run", false]], "save() (flagembedding.abc.finetune.embedder.absembeddermodel method)": [[11, "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel.save", false]], "save() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.save", false]], "save() (flagembedding.finetune.embedder.decoder_only.base.bidecoderonlyembeddermodel method)": [[77, "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel.save", false]], "save() (flagembedding.finetune.embedder.decoder_only.icl.bidecoderonlyembeddericlmodel method)": [[60, "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel.save", false]], "save() (flagembedding.finetune.embedder.encoder_only.base.biencoderonlyembeddermodel method)": [[65, "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel.save", false]], "save() (flagembedding.finetune.embedder.encoder_only.m3.encoderonlyembedderm3model method)": [[70, "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model.save", false]], "save_pretrained() (flagembedding.abc.finetune.reranker.absrerankermodel method)": [[17, "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel.save_pretrained", false]], "set_examples() (flagembedding.inference.embedder.decoder_only.icl.iclllmembedder method)": [[95, "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder.set_examples", false]], "start_multi_process_pool() (flagembedding.abc.inference.absembedder method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.start_multi_process_pool", false]], "start_multi_process_pool() (flagembedding.abc.inference.absreranker method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.start_multi_process_pool", false]], "stop_multi_process_pool() (flagembedding.abc.inference.absembedder static method)": [[21, "FlagEmbedding.abc.inference.AbsEmbedder.stop_multi_process_pool", false]], "stop_multi_process_pool() (flagembedding.abc.inference.absreranker static method)": [[22, "FlagEmbedding.abc.inference.AbsReranker.stop_multi_process_pool", false]]}, "objects": {"FlagEmbedding.abc.finetune.embedder": [[10, 0, 1, "", "AbsEmbedderCollator"], [15, 0, 1, "", "AbsEmbedderDataArguments"], [11, 0, 1, "", "AbsEmbedderModel"], [15, 0, 1, "", "AbsEmbedderModelArguments"], [12, 0, 1, "", "AbsEmbedderRunner"], [10, 0, 1, "", "AbsEmbedderSameDatasetCollator"], [10, 0, 1, "", "AbsEmbedderSameDatasetTrainDataset"], [10, 0, 1, "", "AbsEmbedderTrainDataset"], [13, 0, 1, "", "AbsEmbedderTrainer"], [11, 0, 1, "", "EmbedderOutput"], [10, 0, 1, "", "EmbedderTrainerCallbackForDataRefresh"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderModel": [[11, 1, 1, "", "_compute_cross_device_neg_loss"], [11, 1, 1, "", "_compute_in_batch_neg_loss"], [11, 1, 1, "", "_compute_no_in_batch_neg_loss"], [11, 1, 1, "", "_dist_gather_tensor"], [11, 1, 1, "", "compute_local_score"], [11, 1, 1, "", "compute_loss"], [11, 1, 1, "", "compute_score"], [11, 1, 1, "", "distill_loss"], [11, 1, 1, "", "encode"], [11, 1, 1, "", "forward"], [11, 1, 1, "", "get_local_score"], [11, 1, 1, "", "save"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderRunner": [[12, 1, 1, "", "load_data_collator"], [12, 1, 1, "", "load_tokenizer_and_model"], [12, 1, 1, "", "load_train_dataset"], [12, 1, 1, "", "load_trainer"], [12, 1, 1, "", "run"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderSameDatasetTrainDataset": [[10, 1, 1, "", "_create_batch_data"], [10, 1, 1, "", "_get_file_batch_size"], [10, 1, 1, "", "_get_train_group_size"], [10, 1, 1, "", "_load_dataset"], [10, 1, 1, "", "refresh_epoch"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainDataset": [[10, 1, 1, "", "_load_dataset"], [10, 1, 1, "", "_shuffle_text"]], "FlagEmbedding.abc.finetune.embedder.AbsEmbedderTrainer": [[13, 1, 1, "", "compute_loss"]], "FlagEmbedding.abc.finetune.embedder.EmbedderTrainerCallbackForDataRefresh": [[10, 1, 1, "", "on_epoch_end"]], "FlagEmbedding.abc.finetune.reranker": [[16, 0, 1, "", "AbsLLMRerankerCollator"], [16, 0, 1, "", "AbsLLMRerankerTrainDataset"], [16, 0, 1, "", "AbsRerankerCollator"], [9, 0, 1, "", "AbsRerankerDataArguments"], [17, 0, 1, "", "AbsRerankerModel"], [9, 0, 1, "", "AbsRerankerModelArguments"], [18, 0, 1, "", "AbsRerankerRunner"], [16, 0, 1, "", "AbsRerankerTrainDataset"], [19, 0, 1, "", "AbsRerankerTrainer"], [17, 0, 1, "", "RerankerOutput"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerModel": [[17, 1, 1, "", "compute_loss"], [17, 1, 1, "", "enable_input_require_grads"], [17, 1, 1, "", "encode"], [17, 1, 1, "", "forward"], [17, 1, 1, "", "gradient_checkpointing_enable"], [17, 1, 1, "", "save"], [17, 1, 1, "", "save_pretrained"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerRunner": [[18, 1, 1, "", "load_data_collator"], [18, 1, 1, "", "load_tokenizer_and_model"], [18, 1, 1, "", "load_train_dataset"], [18, 1, 1, "", "load_trainer"], [18, 1, 1, "", "run"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainDataset": [[16, 1, 1, "", "_load_dataset"], [16, 1, 1, "", "_shuffle_text"], [16, 1, 1, "", "create_one_example"]], "FlagEmbedding.abc.finetune.reranker.AbsRerankerTrainer": [[19, 1, 1, "", "compute_loss"]], "FlagEmbedding.abc.inference": [[21, 0, 1, "", "AbsEmbedder"], [22, 0, 1, "", "AbsReranker"]], "FlagEmbedding.abc.inference.AbsEmbedder": [[21, 1, 1, "", "_concatenate_results_from_multi_process"], [21, 1, 1, "", "_encode_multi_process_worker"], [21, 1, 1, "", "encode"], [21, 1, 1, "", "encode_corpus"], [21, 1, 1, "", "encode_multi_process"], [21, 1, 1, "", "encode_queries"], [21, 1, 1, "", "encode_single_device"], [21, 1, 1, "", "get_detailed_instruct"], [21, 1, 1, "", "get_target_devices"], [21, 1, 1, "", "start_multi_process_pool"], [21, 1, 1, "", "stop_multi_process_pool"]], "FlagEmbedding.abc.inference.AbsReranker": [[22, 1, 1, "", "_encode_multi_process_worker"], [22, 1, 1, "", "compute_score"], [22, 1, 1, "", "compute_score_single_gpu"], [22, 1, 1, "", "encode_multi_process"], [22, 1, 1, "", "get_detailed_inputs"], [22, 1, 1, "", "get_detailed_instruct"], [22, 1, 1, "", "get_target_devices"], [22, 1, 1, "", "start_multi_process_pool"], [22, 1, 1, "", "stop_multi_process_pool"]], "FlagEmbedding.finetune.embedder.decoder_only.base": [[77, 0, 1, "", "BiDecoderOnlyEmbedderModel"], [53, 0, 1, "", "DecoderOnlyEmbedderModelArguments"], [78, 0, 1, "", "DecoderOnlyEmbedderRunner"], [79, 0, 1, "", "DecoderOnlyEmbedderTrainer"]], "FlagEmbedding.finetune.embedder.decoder_only.base.BiDecoderOnlyEmbedderModel": [[77, 1, 1, "", "_compute_similarity"], [77, 1, 1, "", "_sentence_embedding"], [77, 1, 1, "", "compute_loss"], [77, 1, 1, "", "compute_score"], [77, 1, 1, "", "enable_input_require_grads"], [77, 1, 1, "", "encode"], [77, 1, 1, "", "gradient_checkpointing_enable"], [77, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.decoder_only.base.DecoderOnlyEmbedderRunner": [[78, 1, 1, "", "load_tokenizer_and_model"], [78, 1, 1, "", "load_trainer"], [78, 1, 1, "", "run"]], "FlagEmbedding.finetune.embedder.decoder_only.icl": [[59, 0, 1, "", "AbsEmbedderSameDatasetCollator"], [60, 0, 1, "", "BiDecoderOnlyEmbedderICLModel"], [58, 0, 1, "", "DecoderOnlyEmbedderICLDataArguments"], [58, 0, 1, "", "DecoderOnlyEmbedderICLModelArguments"], [61, 0, 1, "", "DecoderOnlyEmbedderICLRunner"], [59, 0, 1, "", "DecoderOnlyEmbedderICLSameDatasetTrainDataset"], [62, 0, 1, "", "DecoderOnlyEmbedderICLTrainer"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.BiDecoderOnlyEmbedderICLModel": [[60, 1, 1, "", "_compute_similarity"], [60, 1, 1, "", "_sentence_embedding"], [60, 1, 1, "", "compute_loss"], [60, 1, 1, "", "compute_score"], [60, 1, 1, "", "enable_input_require_grads"], [60, 1, 1, "", "encode"], [60, 1, 1, "", "gradient_checkpointing_enable"], [60, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLRunner": [[61, 1, 1, "", "load_tokenizer_and_model"], [61, 1, 1, "", "load_train_dataset"], [61, 1, 1, "", "load_trainer"], [61, 1, 1, "", "run"]], "FlagEmbedding.finetune.embedder.decoder_only.icl.DecoderOnlyEmbedderICLSameDatasetTrainDataset": [[59, 1, 1, "", "_create_batch_data"]], "FlagEmbedding.finetune.embedder.encoder_only.base": [[65, 0, 1, "", "BiEncoderOnlyEmbedderModel"], [66, 0, 1, "", "EncoderOnlyEmbedderRunner"], [67, 0, 1, "", "EncoderOnlyEmbedderTrainer"]], "FlagEmbedding.finetune.embedder.encoder_only.base.BiEncoderOnlyEmbedderModel": [[65, 1, 1, "", "_compute_similarity"], [65, 1, 1, "", "_sentence_embedding"], [65, 1, 1, "", "compute_loss"], [65, 1, 1, "", "compute_score"], [65, 1, 1, "", "enable_input_require_grads"], [65, 1, 1, "", "encode"], [65, 1, 1, "", "gradient_checkpointing_enable"], [65, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.encoder_only.base.EncoderOnlyEmbedderRunner": [[66, 1, 1, "", "load_tokenizer_and_model"], [66, 1, 1, "", "load_trainer"]], "FlagEmbedding.finetune.embedder.encoder_only.m3": [[70, 0, 1, "", "EncoderOnlyEmbedderM3Model"], [69, 0, 1, "", "EncoderOnlyEmbedderM3ModelArguments"], [70, 0, 1, "", "EncoderOnlyEmbedderM3ModelForInference"], [71, 0, 1, "", "EncoderOnlyEmbedderM3Runner"], [72, 0, 1, "", "EncoderOnlyEmbedderM3Trainer"], [69, 0, 1, "", "EncoderOnlyEmbedderM3TrainingArguments"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Model": [[70, 1, 1, "", "_colbert_embedding"], [70, 1, 1, "", "_compute_similarity"], [70, 1, 1, "", "_dense_embedding"], [70, 1, 1, "", "_encode"], [70, 1, 1, "", "_get_queries_attention_mask"], [70, 1, 1, "", "_sparse_embedding"], [70, 1, 1, "", "compute_colbert_score"], [70, 1, 1, "", "compute_dense_score"], [70, 1, 1, "", "compute_loss"], [70, 1, 1, "", "compute_score"], [70, 1, 1, "", "compute_sparse_score"], [70, 1, 1, "", "enable_input_require_grads"], [70, 1, 1, "", "encode"], [70, 1, 1, "", "ensemble_score"], [70, 1, 1, "", "forward"], [70, 1, 1, "", "gradient_checkpointing_enable"], [70, 1, 1, "", "save"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3ModelForInference": [[70, 1, 1, "", "forward"]], "FlagEmbedding.finetune.embedder.encoder_only.m3.EncoderOnlyEmbedderM3Runner": [[71, 1, 1, "", "get_model"], [71, 1, 1, "", "load_tokenizer_and_model"], [71, 1, 1, "", "load_trainer"]], "FlagEmbedding.finetune.reranker.decoder_only.base": [[54, 0, 1, "", "CrossDecoderModel"], [55, 0, 1, "", "DecoderOnlyRerankerRunner"], [56, 0, 1, "", "DecoderOnlyRerankerTrainer"], [76, 0, 1, "", "RerankerModelArguments"]], "FlagEmbedding.finetune.reranker.decoder_only.base.CrossDecoderModel": [[54, 1, 1, "", "encode"]], "FlagEmbedding.finetune.reranker.decoder_only.base.DecoderOnlyRerankerRunner": [[55, 1, 1, "", "load_tokenizer_and_model"], [55, 1, 1, "", "load_trainer"], [55, 1, 1, "", "run"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise": [[82, 0, 1, "", "CrossDecoderModel"], [83, 0, 1, "", "DecoderOnlyRerankerRunner"], [84, 0, 1, "", "DecoderOnlyRerankerTrainer"], [81, 0, 1, "", "RerankerModelArguments"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise.CrossDecoderModel": [[82, 1, 1, "", "encode"], [82, 1, 1, "", "forward"]], "FlagEmbedding.finetune.reranker.decoder_only.layerwise.DecoderOnlyRerankerRunner": [[83, 1, 1, "", "load_tokenizer_and_model"], [83, 1, 1, "", "load_trainer"], [83, 1, 1, "", "run"]], "FlagEmbedding.finetune.reranker.encoder_only.base": [[87, 0, 1, "", "CrossEncoderModel"], [88, 0, 1, "", "EncoderOnlyRerankerRunner"], [89, 0, 1, "", "EncoderOnlyRerankerTrainer"]], "FlagEmbedding.finetune.reranker.encoder_only.base.CrossEncoderModel": [[87, 1, 1, "", "encode"]], "FlagEmbedding.finetune.reranker.encoder_only.base.EncoderOnlyRerankerRunner": [[88, 1, 1, "", "load_tokenizer_and_model"], [88, 1, 1, "", "load_trainer"]], "FlagEmbedding.inference": [[92, 0, 1, "", "FlagAutoModel"], [93, 0, 1, "", "FlagAutoReranker"]], "FlagEmbedding.inference.FlagAutoModel": [[92, 1, 1, "", "from_finetuned"]], "FlagEmbedding.inference.FlagAutoReranker": [[93, 1, 1, "", "from_finetuned"]], "FlagEmbedding.inference.embedder.decoder_only.base": [[94, 0, 1, "", "BaseLLMEmbedder"]], "FlagEmbedding.inference.embedder.decoder_only.base.BaseLLMEmbedder": [[94, 2, 1, "", "DEFAULT_POOLING_METHOD"], [94, 1, 1, "", "encode"], [94, 1, 1, "", "encode_corpus"], [94, 1, 1, "", "encode_queries"], [94, 1, 1, "", "encode_single_device"]], "FlagEmbedding.inference.embedder.decoder_only.icl": [[95, 0, 1, "", "ICLLLMEmbedder"]], "FlagEmbedding.inference.embedder.decoder_only.icl.ICLLLMEmbedder": [[95, 2, 1, "", "DEFAULT_POOLING_METHOD"], [95, 1, 1, "", "encode"], [95, 1, 1, "", "encode_corpus"], [95, 1, 1, "", "encode_queries"], [95, 1, 1, "", "encode_queries_single_device"], [95, 1, 1, "", "encode_single_device"], [95, 1, 1, "", "get_detailed_example"], [95, 1, 1, "", "set_examples"]], "FlagEmbedding.inference.embedder.encoder_only.base": [[97, 0, 1, "", "BaseEmbedder"]], "FlagEmbedding.inference.embedder.encoder_only.base.BaseEmbedder": [[97, 2, 1, "", "DEFAULT_POOLING_METHOD"], [97, 1, 1, "", "encode"], [97, 1, 1, "", "encode_corpus"], [97, 1, 1, "", "encode_single_device"], [97, 1, 1, "", "pooling"]], "FlagEmbedding.inference.embedder.encoder_only.m3": [[98, 0, 1, "", "M3Embedder"]], "FlagEmbedding.inference.embedder.encoder_only.m3.M3Embedder": [[98, 2, 1, "", "DEFAULT_POOLING_METHOD"], [98, 1, 1, "", "colbert_score"], [98, 1, 1, "", "compute_lexical_matching_score"], [98, 1, 1, "", "compute_score"], [98, 1, 1, "", "compute_score_multi_process"], [98, 1, 1, "", "compute_score_single_device"], [98, 1, 1, "", "convert_id_to_token"], [98, 1, 1, "", "encode"], [98, 1, 1, "", "encode_corpus"], [98, 1, 1, "", "encode_queries"], [98, 1, 1, "", "encode_single_device"]], "FlagEmbedding.inference.reranker.decoder_only.base": [[99, 0, 1, "", "BaseLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.base.BaseLLMReranker": [[99, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.decoder_only.layerwise": [[100, 0, 1, "", "LayerWiseLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.layerwise.LayerWiseLLMReranker": [[100, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.decoder_only.lightweight": [[101, 0, 1, "", "LightweightLLMReranker"]], "FlagEmbedding.inference.reranker.decoder_only.lightweight.LightweightLLMReranker": [[101, 0, 1, "", "compute_score_single_gpu"]], "FlagEmbedding.inference.reranker.encoder_only.base": [[102, 0, 1, "", "BaseReranker"]], "FlagEmbedding.inference.reranker.encoder_only.base.BaseReranker": [[102, 0, 1, "", "compute_score_single_gpu"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute"}, "terms": {"": [13, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 71, 77, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 109, 110, 111, 112, 114, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142], "0": [9, 10, 11, 15, 24, 27, 32, 35, 39, 42, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 99, 100, 101, 112, 114, 119, 120, 124, 128, 129, 130], "00": [120, 122, 133, 134, 138], "000": [106, 133], "00000004": 119, "00000005": 119, "00016697": 120, "00089447": 120, "001": 134, "00146474": 120, "00310114": 120, "00329455": 120, "00368039": 120, "0043185e": 120, "00599566": 120, "00683443": 110, "00755427": 120, "0075684": 120, "00756918": 110, "00786822": 120, "00790005": 110, "00805702": 120, "00806659": 110, "00819298": 120, "00880391988903284": 122, "0093503": 120, "00991": 134, "00996143": 120, "01": [130, 138], "01041734": 120, "010771302313529425": 134, "010771302313530132": 134, "01113793": 120, "01337725": 120, "01374448": 120, "01503995": 120, "01651684": 120, "01709837": 120, "01715658": 120, "01777726": 120, "01805054": 120, "01843987": 120, "02": [69, 120, 121, 133], "02270943": 110, "02311821": 120, "02357143": 110, "02385841": 120, "02397249": 120, "02429199": 120, "02575599": 120, "02722942": 120, "02838556": 110, "02961654": 120, "02993429": 120, "03": [120, 121, 128, 134], "03038301": 110, "03216": 141, "03260205": 120, "03411707": 120, "03611493": 110, "036222943297402846": 134, "0371782e": 121, "0377209694331257": 134, "037720969433127145": 134, "0379632e": 120, "03835309": 120, "03855301": 120, "038790629929866066": 134, "03879062992990034": 134, "0389353e": 120, "03919311": 120, "039217": 120, "03977485677045894": 134, "039774856770459645": 134, "03988946": 120, "04": [120, 121, 130], "040755156": [120, 122], "04147115653921931": 134, "04356123278888682": 134, "04374858": 110, "04479263": 120, "0449261e": 120, "045134712": [120, 122], "04707828": 120, "04716": 134, "04828531": 120, "05": [24, 69, 120, 121, 122], "050144322": [120, 122], "05022853": 120, "05069073": 120, "05281549383775287": 134, "05432154580979357": 134, "05457945565481172": 134, "05474931": 120, "05985384": 120, "060962623117325254": 134, "06255283252590663": 134, "06259296677860492": 134, "06342201": [120, 122], "06389635013430676": 134, "06396189194646361": 134, "06509776": 120, "06690213479396273": 134, "06it": 134, "07185174301688693": 134, "07364476417961506": 134, "07404093236468848": 134, "07501290390362861": 134, "07507962333910836": 134, "07692307692307693": 124, "077": 124, "08": 69, "081469566": [120, 122], "08164985279853691": 134, "082762718200684": 124, "083": 124, "08333333333333333": 124, "08362077": [120, 122], "088312": 130, "08841": 134, "09038": 128, "09705499215630589": 134, "09824591983546396": 134, "1": [10, 11, 24, 27, 32, 35, 39, 42, 53, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 98, 101, 105, 111, 112, 114], "10": [27, 32, 39, 42, 110, 120, 122, 125, 127, 130, 131, 133, 138, 140], "100": [16, 24, 27, 32, 35, 39, 42, 106, 112, 120, 122, 125, 131, 133, 134, 138, 140], "1000": [24, 27, 32, 35, 39, 42, 128, 129, 130, 134, 141, 142], "10000": 131, "1000000": 131, "100000000": [9, 15, 58], "101": 121, "102": 121, "1024": [24, 27, 32, 35, 42, 119, 122, 124], "10292184602358935": 134, "10292184602358977": 134, "102m": [114, 120], "104": 130, "1045": 121, "104569": 130, "106": 131, "107": 130, "10744937823276134": 134, "10744937823276193": 134, "109m": [114, 120], "10k": 35, "11": [121, 125, 128, 130, 131], "110": 131, "111": [120, 128], "112": 128, "11284619565817842": 134, "113": 128, "114": 130, "11598700704312062": 134, "116": [128, 130], "11679": 120, "117": [128, 130], "11min": 131, "12": [120, 121, 130, 131, 134], "122": 130, "12347288098914058": 134, "124": 130, "12457339152558143": 134, "125": 130, "128": [9, 10, 15, 16, 22, 58, 59, 99, 100, 101, 102, 129, 130, 131], "12807325096717753": 134, "12841084787822227": 134, "12898192060943495": 134, "12942556865700913": 134, "12964639": [120, 122], "12964855554504057": 134, "12969109830101241": 134, "13": [39, 125, 128, 130, 131], "130": 130, "1300413865104607": 134, "13097093150054095": 134, "131": 130, "13118224861025093": 134, "13164524259533786": 134, "13168797291549253": 134, "13241573571401533": 134, "133": [114, 120], "1340775377068567": 134, "13440904793529648": 134, "1346130730317385": 134, "135": 130, "13522755012490456": 134, "13522755012490692": 134, "1355361594910923": 134, "13689369": [120, 122], "137": 130, "1378988612808882": 134, "13794450668758515": 134, "138": 130, "1382786098284509": 134, "13914318784294258": 134, "1396047981645623": 134, "14": [125, 130, 131, 134, 140], "14012953903010958": 134, "14012953903010988": 134, "1404708e": 120, "141": 130, "1410889527057097": 134, "14108895270570979": 134, "144": 130, "14726476953035533": 134, "149": 131, "14976954460144": 134, "15": [130, 131, 134, 140], "150": [131, 140, 141, 142], "15149": 134, "15236205846534961": 134, "15256475371124711": 134, "1536": 119, "1557795701081579": 134, "156": 130, "15610387932529113": 134, "15620049317363813": 134, "158": 130, "158875": 128, "15919987960292029": 134, "15930478114759905": 134, "15934819555197366": 134, "15956349246366208": 134, "16": [32, 53, 58, 76, 81, 125, 128, 129, 130, 131], "1604091882521101": 134, "16057318234658585": 134, "161": 130, "162": 130, "16231721725673165": 134, "163": 130, "1657018523692905": 134, "166": 130, "167": 130, "16823918613191954": 134, "16823918613192046": 134, "169": [130, 131], "17": [125, 131, 134], "170": [105, 112, 130], "17001738": [120, 122], "172": 130, "17346152653542332": 134, "175": 130, "176": 130, "179": 130, "17953": 121, "17min": 131, "18": [32, 125, 128, 131, 141], "180": 130, "1800": 69, "184": 130, "186": 130, "187": 130, "188": [129, 130], "189": 130, "19": [111, 125], "192": 130, "193": 130, "19554448500275612": 122, "197": 129, "199": [129, 130], "1998": 121, "1b": 111, "1e": [69, 121, 122], "1min": 131, "1st": 114, "2": [32, 42, 101, 111, 112, 119], "20": [35, 125, 130, 131, 133, 140], "201": 130, "2023": [32, 114], "205": 130, "206": 130, "2082448e": 120, "21": [125, 130, 131, 133, 138], "210": 130, "21061528": 119, "2125367e": 120, "214": 130, "215": 130, "218": [130, 131], "219": 130, "22": [125, 131, 133, 138], "220": 130, "221": 130, "22238": 134, "22279659689895054": 134, "22279659689895104": 134, "2251": 128, "226": 130, "228": 130, "228780": 120, "229": 130, "2293": 121, "22it": 120, "23": [122, 125], "23025740175221762": 134, "23025740175221865": 134, "232": 130, "2320": 120, "233": 130, "2359587e": 120, "2361": 121, "237": 130, "238": 130, "24": [122, 125], "240131": 122, "2402": 141, "241": 130, "245": 130, "247": 130, "24906276": 119, "24b": 138, "24m": [114, 120], "25": [122, 125, 140], "250002": 122, "251": 130, "25167602": [120, 122], "25186998": [120, 122], "255": 130, "256": [21, 22, 94, 95, 97, 98, 120, 130, 133, 138], "257435": 129, "2588": 120, "26": [35, 125, 128], "260": 134, "262": 120, "26957875": [120, 122], "26it": 134, "27": [112, 120, 130], "272": 134, "27280585498859483": 122, "276": 120, "278m": 138, "28": [111, 125, 130], "2811369e": 120, "2842189e": 120, "2892313928157665": 134, "2892313928157675": 134, "29": 128, "2911752e": 120, "2998275e": 121, "2b": 138, "2min": 131, "3": [39, 42, 69, 70, 99, 100, 101, 102, 111, 114, 119, 121, 130], "30": [120, 122, 125, 130, 131, 140], "300": 140, "30057": 128, "30502": 128, "30522": 121, "3072": 121, "31": [128, 131], "31969923": 119, "32": [9, 10, 15, 16, 58, 59, 120, 129, 130, 131, 135, 136], "3211860920443005": 134, "32118609204433185": 134, "3214332e": 121, "32672375": 110, "326m": [114, 120], "327": 110, "3298163165186628": 125, "33": [114, 120, 128, 130], "330": 130, "333": 124, "3333333333333333": 124, "33353207": [120, 122], "335": 120, "335m": [114, 120], "34": [114, 120, 130], "342316": 128, "345639616995194": 134, "3456396169952022": 134, "34739798": 119, "34749585": 122, "349868": 122, "35": [130, 136], "35350388": 110, "354": 110, "3577225e": 120, "35it": 138, "36": [131, 134], "363": 120, "36308263419153386": 134, "3630826341915611": 134, "3666666666666667": 125, "36792332": 110, "368": 110, "3698": 121, "37": 131, "3767978": 127, "37858668": 127, "384": 119, "3894034e": 120, "3911421e": 120, "392": 129, "3924331e": 121, "39290053": 110, "393": 110, "394": 110, "39446455": 110, "3f": 110, "3min": 131, "4": [17, 42, 54, 82, 87, 99, 100, 101, 102, 130], "40": 140, "400": 140, "40196604": 110, "402": 110, "40754": 134, "4083": 121, "409": [114, 120], "4091221e": 120, "4096": 122, "41": [130, 134], "4139402560455192": 134, "419": 131, "42": [69, 130], "42427146": 127, "43": 130, "438": [114, 120], "44": [130, 134], "44429": 128, "45": 130, "4549762e": 121, "46": [111, 130, 131], "4621177911758423": 122, "4626108": 110, "463": 110, "4667": 121, "471": [129, 130], "4740132817599919": 134, "4740132817600036": 134, "474676132202148": 138, "47721898396760526": 134, "4772189839676386": 134, "48": 130, "4865": 120, "4884483e": 120, "49": [128, 130], "4m": [114, 120], "4o": [140, 141, 142], "4x": 130, "5": [27, 39, 42, 45, 105, 109, 110, 111, 112, 115, 119, 121, 122, 129, 130, 134, 135, 136, 140, 141, 142], "50": 140, "500": [69, 127, 140], "5000": [133, 138], "5030322e": 120, "5092714e": 121, "5097007": 127, "51": 130, "512": [9, 21, 22, 94, 95, 97, 98, 99, 100, 101, 102, 120, 121], "51932": 134, "51b": 138, "52": 130, "5208629682313899": 134, "521": 130, "527691": 127, "528": 110, "5284606": 110, "5331": [133, 138], "5337047390639782": 122, "54023": 134, "5409331": 127, "5429113323850182": 134, "5475257e": 120, "55": 130, "550": 131, "5543230e": 120, "55717": 134, "55773": 134, "56": [128, 130, 134, 135], "5603739077423295": 134, "560m": 138, "56202": 134, "563260143484355911": 35, "56344": 134, "56347": 134, "564661930998293": 134, "5660817425350153": 134, "5661121884705748": 134, "568": 131, "5684842": 120, "568m": [120, 138], "569m": 112, "57": 130, "5703944e": 121, "57525384": 119, "58": 131, "5845405e": 120, "5856720000000037": 131, "5895271e": 120, "59": [130, 138], "59190154": 119, "5931472182273865": 124, "59364545": 127, "59461": 134, "595": 131, "5955665344840209": 125, "598": 131, "5983": 120, "5989914": 120, "5e": 69, "6": [42, 110, 120, 121, 124, 125, 128, 130, 133, 136], "60": 140, "600": 140, "602461": 130, "603": 110, "6031525": 110, "6062041": 127, "6077381": 121, "608": 110, "6082418": 110, "62": 131, "6210502": 119, "625": 124, "6252808e": 130, "6259035": 122, "63": 130, "630898999999999": 131, "63276503": 119, "63616": 134, "64": [53, 58, 76, 81, 130, 131], "64720015": 119, "6511828e": 130, "65131": 134, "6561864e": 120, "658928": 129, "660": 131, "66063": 134, "6613": 134, "6658131e": 130, "6666666666666666": 125, "66714": 134, "6686779": 127, "6726490e": 120, "6754939e": 120, "6782462": 122, "68": [124, 130, 138], "6840411e": 121, "6852231e": 120, "6860173e": 120, "69": 131, "697673": 119, "7": [42, 45, 110, 111, 120, 124, 125, 127, 131, 135], "70": [111, 130], "71": 130, "714613139629364": 124, "7206438e": 121, "7268854e": 120, "72b": 138, "736794": 120, "74": 130, "742325": 128, "7446640729904175": 124, "7461165": 120, "746731": 130, "75747": 134, "76226806640625": 138, "768": [110, 119, 121, 127, 128, 129, 130, 133, 138, 140, 142], "7761475e": 121, "7796662449836731": 122, "7861": 121, "7900386": 119, "7min": 131, "8": [9, 15, 58, 69, 81, 82, 101, 110, 114, 120, 121, 122, 125, 127, 128, 129, 130, 131], "80": 131, "802726686000824": 124, "8055555555555555": 125, "8074074074074075": 125, "8192": [39, 112, 120, 122], "8194": 122, "823843240737915": 138, "823908": 130, "8240882158279419": 124, "8270": 121, "83": 120, "831": 131, "8333333333333334": 125, "8384371e": 120, "84": [130, 131], "8417887e": 121, "8445771e": 120, "8462474": 120, "849915": 128, "85341793": 120, "862962962962963": 125, "87": [130, 131], "8714428e": 120, "8721525e": 121, "87282517": 119, "8765034e": 120, "88": 130, "88407": 134, "8921868e": 120, "8961012e": 120, "8963409999999716": 131, "89705944": 120, "899": 130, "9": [69, 110, 120, 121, 125, 127, 128, 138], "90": 130, "90017": 120, "90914035": 120, "91": 130, "911423": 130, "9166666666666666": 125, "91it": [122, 133], "93": 130, "9331330e": 120, "94": [128, 131], "9431": 134, "946": 130, "95": [114, 120], "96": 58, "97": [133, 138], "9803897e": 120, "9825": [133, 138], "9869253606521631": [133, 138], "99": 138, "990444999999872": 131, "9905590e": 120, "99147": 134, "995": 138, "9963092975357145": 138, "99644": 134, "999": 69, "9999189999999997": 131, "9999997": [119, 121], "99999976": 119, "9999998": 119, "9999999": [119, 121], "99999994": 119, "99999997": 119, "99999998": 119, "99999999": 119, "9b": 138, "9min": 131, "A": [11, 13, 16, 19, 21, 22, 70, 71, 98, 99, 100, 101, 106, 111, 119, 120, 124, 127, 135, 136, 140, 141, 142], "And": [110, 124, 125, 127, 128, 131, 135], "As": [111, 121, 131], "But": [105, 111, 119, 124, 129, 131], "By": [13, 19, 111, 128, 141, 142], "For": [105, 108, 112, 114, 119, 120, 121, 124, 129, 130, 131, 134, 135, 136, 138, 141, 142], "If": [11, 13, 19, 21, 22, 60, 65, 70, 71, 77, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 108, 109, 120, 121, 122, 127, 128, 133, 140, 141, 142], "In": [105, 106, 110, 111, 120, 121, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143], "It": [21, 22, 24, 27, 42, 45, 106, 111, 112, 120, 121, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 142], "No": [119, 127], "One": [10, 59, 110], "Or": [24, 27, 32, 35, 39, 42, 45, 136, 141], "That": [119, 129, 141], "The": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 32, 35, 39, 45, 54, 59, 60, 61, 65, 70, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 110, 111, 112, 114, 119, 120, 121, 122, 124, 125, 128, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142], "Their": 119, "Then": [39, 105, 109, 112, 114, 119, 121, 122, 124, 125, 127, 129, 130, 131, 134, 135, 136, 140, 141, 142], "There": [117, 119, 124, 128, 129], "These": [106, 140], "To": [114, 116, 117, 119, 120, 121, 143], "With": 142, "_": [110, 112, 125, 128, 133, 138], "__init__": 136, "_colbert_embed": [49, 50, 63, 68, 70], "_compute_cross_device_neg_loss": [0, 7, 8, 11], "_compute_in_batch_neg_loss": [0, 7, 8, 11], "_compute_no_in_batch_neg_loss": [0, 7, 8, 11], "_compute_similar": [49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "_concatenate_results_from_multi_process": [0, 20, 21], "_create_batch_data": [0, 7, 8, 10, 49, 50, 51, 57, 59], "_dense_embed": [49, 50, 63, 68, 70], "_description_": [70, 98], "_dist_gather_tensor": [0, 7, 8, 11], "_encod": [49, 50, 63, 68, 70, 120, 121], "_encode_multi_process_work": [0, 20, 21, 22], "_get_file_batch_s": [0, 7, 8, 10], "_get_queries_attention_mask": [49, 50, 63, 68, 70], "_get_train_group_s": [0, 7, 8, 10], "_i": 125, "_load_dataset": [0, 7, 8, 10, 14, 16], "_sentence_embed": [49, 50, 51, 57, 60, 63, 64, 65, 73, 74, 75, 77], "_shuffle_text": [0, 7, 8, 10, 14, 16], "_sparse_embed": [49, 50, 63, 68, 70], "_summary_": [70, 102], "_type_": 70, "a_i": 124, "a_norm": 124, "abc": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22], "abil": [95, 111, 112, 114, 120, 135, 136], "abl": [112, 141], "about": [110, 116, 124, 129, 131, 135, 140, 141, 142], "abov": [110, 114, 125, 129], "absargu": [0, 7, 8, 14], "absdataset": [0, 7, 8, 14], "absembedd": [0, 20, 92], "absembeddercol": [0, 7, 8, 12], "absembedderdataargu": [0, 7, 10, 12, 14, 15, 66, 71, 78], "absembeddermodel": [0, 7, 8, 12, 13, 55, 61, 66, 71, 78, 83, 88], "absembeddermodelargu": [0, 7, 12, 14, 15, 66], "absembedderrunn": [0, 7, 8, 12], "absembeddersamedatasetcol": [0, 7, 8, 49, 50, 51, 57], "absembeddersamedatasettraindataset": [0, 7, 8], "absembeddertrain": [0, 7, 8], "absembeddertraindataset": [0, 7, 8, 12], "absembeddertrainingargu": [10, 12, 61, 66, 78], "absllmrerankercol": [0, 7, 14], "absllmrerankertraindataset": [0, 7, 14], "absmodel": [0, 7, 8, 14], "absrerank": [0, 20, 93], "absrerankercol": [0, 7, 14, 18], "absrerankerdataargu": [0, 7, 8, 9, 16, 18, 55, 83, 88], "absrerankermodel": [0, 7, 14, 18, 19, 55, 83, 88], "absrerankermodelargu": [0, 7, 8, 9, 18, 88], "absrerankerrunn": [0, 7, 14, 18], "absrerankertrain": [0, 7, 14], "absrerankertraindataset": [0, 7, 14, 18], "absrerankertrainingargu": [18, 55, 83, 88], "absrunn": [0, 7, 8, 14], "abstract": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 82, 111], "abstrain": [0, 7, 8, 14], "academi": [110, 117, 120], "acceler": [119, 122, 138], "accelerator_config": 69, "accept": [106, 127, 129, 131, 135], "access": 106, "acclaim": [110, 127], "accomplish": [119, 140, 142], "accord": [92, 93, 110, 120, 135, 136], "accur": [106, 138, 141], "accuraci": 129, "achiev": [105, 111, 114], "acoust": 119, "across": [32, 35, 45, 98, 119, 125, 133, 134], "acrross": 128, "activ": [17, 24, 60, 65, 70, 77, 111, 112, 121, 122], "actor": [110, 127], "actual": [16, 105, 112, 125, 133], "ad": [112, 122, 127, 129, 130, 131], "adafactor": 69, "adam_beta1": 69, "adam_beta2": 69, "adam_epsilon": 69, "adamw_torch": 69, "add": [105, 120, 127, 128, 129, 130, 131, 133, 138, 140], "addit": [21, 22, 112, 141], "additional_special_token": [53, 58], "adjust": [60, 65, 70, 77, 128], "adopt": [135, 136, 141], "advanc": 119, "advantag": 119, "advis": [21, 22], "afqmc": 136, "after": [10, 59, 97, 110, 128, 129, 135, 136, 138], "ag": 111, "aggreg": 142, "ai": [110, 127, 140], "ailuropoda": 138, "air": [23, 111], "air_bench": 24, "al": 128, "alexnet": 110, "algorithm": [129, 130], "alias": 35, "align": 35, "all": [11, 13, 19, 21, 22, 105, 110, 119, 124, 125, 127, 129, 133, 135, 136, 140, 141, 142], "all_scor": 11, "allevi": [114, 120], "alloc": 128, "allow": [111, 129, 138], "almost": 128, "along": [21, 22, 95, 119], "alreadi": [124, 127, 129, 131, 133, 135], "also": [13, 19, 24, 32, 45, 111, 116, 119, 120, 128, 131, 134, 135, 140, 142], "altern": 135, "although": 106, "altman": [110, 127], "am": [114, 124], "amazoncounterfactualclassif": 135, "amazonpolarityclassif": 135, "amazonreviewsclassif": 135, "american": 140, "amid": 140, "among": 114, "amount": [106, 112, 119, 128, 129, 131, 141, 142], "an": [10, 21, 22, 32, 35, 39, 45, 107, 110, 112, 119, 122, 127, 129, 131, 133, 134, 135, 136, 140, 141, 142], "analysi": [106, 142], "analyz": 142, "andrew": [110, 127], "angl": 124, "ani": [16, 21, 22, 24, 70, 94, 95, 97, 98, 99, 100, 101, 102, 105, 110, 116, 129, 131], "ann": [129, 131], "anna": 124, "anoth": [99, 100, 101, 129], "answer": [35, 42, 110, 111, 120, 133, 138, 140, 141, 142], "ap": 125, "ap_sum": 125, "api": [112, 114, 117, 119, 120, 121, 140, 141, 142], "appear": [110, 112, 119, 122, 136], "append": [125, 133, 138], "appli": 129, "applic": [45, 105, 131, 134, 141, 142], "approach": [106, 119, 128], "appropri": [10, 12, 18, 92, 93, 108], "approxim": [129, 130], "ar": [32, 35, 100, 101, 105, 106, 110, 111, 112, 114, 116, 117, 119, 120, 121, 122, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142], "architectur": [119, 138], "area": 117, "arg": [10, 13, 16, 17, 19, 39, 56, 59, 62, 67, 72, 79, 84, 89, 136], "arguana": [27, 134, 135], "argument": [0, 1, 9, 10, 12, 15, 16, 18, 49, 50, 51, 52, 55, 57, 59, 61, 63, 68, 71, 73, 74, 75, 78, 80, 83, 133], "arithmet": 106, "arrai": [21, 92, 94, 95, 97, 98, 120, 125, 133, 138, 140], "arri": 98, "art": 111, "articl": 39, "artifici": [117, 120], "artist": [110, 127], "artistri": 140, "arxiv": [24, 141], "arxivclusteringp2p": 135, "arxivclusterings2": 135, "as_query_engin": 142, "as_retriev": 141, "asarrai": [119, 133, 138], "asia": 138, "ask": [105, 117, 141, 142], "askubuntudupquest": 135, "aspect": 131, "assembl": [121, 141], "assert": 128, "assess": [45, 134], "assign": [129, 135, 136], "assist": 140, "assum": [125, 133], "astonish": [110, 127], "astyp": [125, 127, 128, 133, 138], "atec": 136, "ation": 122, "atmospher": 140, "attent": [70, 97, 121, 122], "attention_mask": [60, 65, 70, 77, 97, 121], "attribut": [98, 133, 142], "aug": 114, "augment": 120, "authent": 140, "auto": 69, "auto_find_batch_s": 69, "autom": 24, "automat": [92, 93, 105, 120, 130], "automodel": [60, 65, 70, 77, 121, 122], "autotoken": [11, 17, 54, 60, 65, 70, 77, 82, 87, 121, 122], "avail": [105, 135, 138, 140], "averag": [111, 112, 122, 125, 135, 136], "avg": 140, "avoid": [10, 59, 129], "award": [110, 127], "b": [99, 100, 101, 122, 124], "b_i": 124, "b_norm": 124, "baai": [24, 27, 32, 35, 39, 42, 45, 109, 110, 111, 112, 114, 115, 117, 119, 121, 122, 124, 127, 133, 134, 135, 136, 138, 140, 141, 142], "back": [98, 111], "bag": [112, 119, 122], "bake": 124, "balanc": [114, 131], "banh": 140, "banking77classif": 135, "bar": 140, "base": [11, 12, 17, 18, 21, 22, 27, 39, 49, 50, 51, 53, 54, 55, 56, 60, 62, 63, 65, 66, 67, 70, 73, 74, 76, 77, 78, 79, 84, 85, 87, 88, 89, 94, 97, 99, 100, 101, 102, 109, 110, 111, 112, 114, 119, 120, 121, 122, 127, 129, 133, 134, 135, 136, 138, 140, 141, 142], "base_model": [11, 17, 54, 60, 65, 70, 77, 82, 87], "baseembedd": [91, 96], "basellmembedd": [91, 94, 96], "basellmrerank": [91, 103], "basererank": [91, 103], "basic": [117, 128, 134], "basketbal": 119, "batch": [10, 11, 16, 17, 21, 22, 54, 59, 60, 65, 70, 77, 82, 87, 94, 95, 97, 98, 99, 100, 101, 102, 121, 134, 135, 136], "batch_eval_metr": 69, "batch_raw_data": [10, 59], "batch_siz": [21, 22, 94, 95, 97, 98, 99, 100, 101, 102, 120, 133, 136, 138], "bcd": 140, "bear": 138, "becaus": [124, 129, 131, 141], "becom": 130, "beef": 140, "befor": [119, 124, 127, 129, 130, 131, 138], "begin": 121, "behavior": [13, 19, 111], "beij": [117, 120], "being": [13, 19, 24, 142], "beir": [23, 134, 135, 136], "beir_eval_result": 27, "below": [105, 110, 111, 127, 134, 136, 140, 141, 142], "bench": [23, 111], "bench_24": 24, "benchmark": [24, 27, 45, 114, 131, 134, 135, 136], "benchmark_vers": 24, "benefici": [110, 127], "bert": [114, 119, 120, 121], "bertattent": 121, "bertembed": 121, "bertencod": 121, "bertintermedi": 121, "bertlay": 121, "bertmodel": 121, "bertoutput": 121, "bertpool": 121, "bertselfattent": 121, "bertselfoutput": 121, "besid": [117, 128], "best": [105, 110, 114, 127, 131], "better": [105, 106, 114, 119, 138], "between": [32, 60, 65, 70, 77, 110, 111, 112, 114, 119, 122, 124, 125, 130, 135, 136, 141, 142], "bf16": [69, 99, 100, 101], "bf16_full_ev": 69, "bge": [24, 27, 32, 35, 39, 42, 45, 95, 98, 105, 107, 109, 110, 116, 124, 127, 133, 134, 135, 136, 138, 140, 141, 142], "bgem3flagmodel": [112, 120, 122], "bi": 106, "bia": [121, 122], "bidecoderonlyembeddericlmodel": [49, 50, 51, 57, 60], "bidecoderonlyembeddermodel": [49, 73, 74, 75, 77], "biencoderonlyembeddermodel": [49, 50, 63, 64, 65], "bin": [127, 133], "binari": [125, 129, 135, 136], "biorxivclusteringp2p": 135, "biorxivclusterings2": [45, 135], "bioss": 135, "bit": 130, "bm": 122, "bm25": [105, 112, 119, 120, 122], "bn": 32, "bool": [9, 10, 11, 13, 15, 16, 19, 21, 22, 53, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "bot": [140, 141, 142], "both": [11, 13, 19, 124, 125, 133, 138, 140], "bourbon": 140, "bow": 119, "bq": 136, "brad": [110, 127], "break": [110, 125, 127, 133, 138], "brief": 140, "brute": 131, "bucket": [129, 130], "build": [107, 127, 129, 140, 141, 142], "built": [39, 128], "bunch": 140, "burden": 131, "c": [110, 114, 125, 127, 128, 129, 130, 131, 133, 138], "c22ab2a51041ffd869aaddef7af8d8215647e41a": 134, "c_mteb": 136, "cach": [24, 27, 32, 35, 39, 42, 45, 71, 94, 95, 97, 98, 99, 100, 101, 102], "cache_dir": [9, 15, 24, 32, 35, 39, 42, 45, 53, 58, 69, 71, 76, 81, 94, 95, 97, 98, 99, 100, 101, 102], "cache_path": [9, 15, 27, 32, 35, 39, 42, 58], "calc_ap": 125, "calc_map": 125, "calc_mrr": 125, "calc_precis": 125, "calc_recal": [125, 133, 138], "calcul": [105, 124, 125, 130, 133, 138], "call": [10, 11, 17, 70, 82, 120, 134, 138, 142], "callabl": [13, 19, 56, 62, 67, 72, 79, 84, 89], "callback": [10, 13, 19, 56, 62, 67, 72, 79, 84, 89], "can": [21, 22, 24, 27, 32, 35, 39, 42, 45, 99, 100, 101, 105, 108, 109, 110, 111, 112, 119, 120, 121, 122, 124, 127, 128, 129, 130, 131, 133, 135, 136, 140, 141, 142], "candid": [106, 112, 122], "cap": [112, 122, 124, 125], "capabl": [106, 111, 125, 133, 138, 141], "capsul": 142, "captur": [106, 119, 120, 121, 122, 134, 135], "card": 114, "care": [124, 135], "case": [105, 119, 121, 124, 127, 128, 129, 133, 135, 141, 142], "casual": 140, "cat": [119, 138], "caus": [111, 124, 129], "caution": 135, "cd": 108, "cdc": 111, "cdist": 124, "cdot": [112, 122, 124], "cell": [119, 120, 121, 127, 129, 130, 131, 133, 141, 142], "centroid": 130, "ceo": [110, 127], "certain": 119, "chain": [140, 141], "challeng": 32, "chanc": 124, "chang": [24, 27, 32, 35, 39, 42, 45, 111, 127, 135, 136], "charact": [119, 141, 142], "characterist": 111, "chart": 111, "chat": [116, 120, 140, 141, 142], "chat_model": 141, "chatbot": [140, 141], "chatopenai": 141, "chatprompttempl": 141, "check": [111, 112, 117, 119, 120, 121, 127, 128, 129, 134, 135, 136, 141, 142, 143], "checkout": 138, "checkpoint": [17, 60, 65, 70, 77], "chees": 140, "chef": 140, "cheli": 140, "chick": 140, "chicken": 140, "child": [92, 93], "children": [21, 22], "china": 138, "chines": [114, 120, 136, 138, 140], "chinesetasklist": 136, "chmod": [24, 27, 32, 35, 39, 42, 45], "choic": [119, 121, 128, 129, 130, 131, 133, 140, 142], "choos": [39, 92, 93, 101, 105, 110, 129, 133, 136, 141], "chose": 134, "chosen": [112, 122, 134, 142], "chunk": [141, 142], "chunk_overlap": [141, 142], "chunk_siz": [141, 142], "cinemat": [110, 127], "cl": [65, 69, 70, 97, 98, 112, 121, 122, 136], "claim": 114, "class": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 45, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 117, 120, 128, 130, 133, 134, 136], "classic": 140, "classif": [119, 135, 136], "classmethod": [92, 93], "clean": 141, "clear": 124, "client": [119, 140], "climatefev": [134, 135], "clone": [108, 143], "cloner": 128, "close": [124, 140], "closer": [119, 124], "closest": [129, 130], "clsclusteringp2p": 136, "clsclusterings2": 136, "club": [110, 127], "cluster": [106, 119, 129, 130, 135, 136], "cmedqaretriev": 136, "cmedqav1": 136, "cmedqav2": 136, "cmnli": 136, "co": [112, 122, 124, 127, 128], "cobert": 98, "cobert_dim": 98, "cocktail": 140, "code": [106, 116, 117, 121, 128, 129], "codebook": 130, "coeffici": 124, "coher": 119, "colber": 70, "colbert": [70, 71, 98, 105, 112, 120, 122], "colbert_dim": [69, 71, 98], "colbert_scor": [70, 91, 96, 98, 122], "colbert_vec": [98, 112, 120, 122], "colbert_weight": 70, "collat": [10, 12, 16, 18, 59], "collect": [116, 119, 120], "collis": 129, "com": [108, 109, 131], "combin": [21, 22, 95, 128, 131], "combine_docu": 141, "come": [35, 119, 140], "comfort": 140, "command": [135, 136], "commerci": 105, "common": [111, 112, 120, 129], "commonli": [105, 111, 121, 142], "commun": [105, 117, 119, 141], "compar": [124, 125, 129, 133, 135], "comparison": [106, 131], "compet": 134, "competit": [114, 120], "compl": [10, 59], "complet": [21, 22, 95, 138, 140, 142], "complex": [119, 131, 142], "compliment": 140, "composit": 128, "compound": 112, "comprehens": 42, "compress": [101, 129, 130, 138], "compress_lay": 101, "compress_ratio": 101, "compris": [35, 135, 136], "comput": [11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 82, 92, 93, 94, 97, 98, 99, 100, 101, 102, 106, 109, 110, 112, 119, 120, 122, 124, 125, 127, 129, 130, 131, 135, 138], "compute_cod": 130, "compute_colbert_scor": [49, 50, 63, 68, 70], "compute_dense_scor": [49, 50, 63, 68, 70], "compute_lexical_matching_scor": [91, 96, 98, 122], "compute_local_scor": [0, 7, 8, 11], "compute_loss": [0, 7, 8, 11, 13, 14, 17, 19, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "compute_metr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "compute_recal": 131, "compute_scor": [0, 7, 8, 11, 20, 22, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77, 91, 96, 98, 138], "compute_score_func": 11, "compute_score_multi_process": [91, 96, 98], "compute_score_single_devic": [91, 96, 98], "compute_score_single_gpu": [0, 20, 22, 91, 99, 100, 101, 102, 103], "compute_sparse_scor": [49, 50, 63, 68, 70], "comupt": [112, 122], "comuput": 130, "concaten": [11, 21, 22, 120], "concept": 107, "concis": [110, 127, 135], "conclus": 124, "conda": [127, 128, 129, 130, 131], "config": [21, 22, 99, 100, 101], "config_nam": [9, 15, 53, 58, 69, 76, 81], "configur": 111, "congrat": 133, "connect": [109, 111, 119, 129, 142], "consid": [119, 125, 129, 131, 133], "consider": 124, "constitut": 39, "construct": [129, 141, 142], "consum": [106, 127, 129, 133, 135], "consumpt": 16, "contain": [16, 21, 22, 24, 32, 45, 70, 71, 111, 117, 121, 125, 127, 128, 130, 133, 134, 135, 136, 138, 141, 142], "content": [117, 134, 135, 136, 140, 141], "context": [106, 111, 119, 120, 138, 141, 142], "context_str": 142, "continuum": 32, "contribut": [110, 111, 127], "control": [10, 11, 60, 65, 70, 77, 128], "convers": [16, 120], "convert": [98, 106, 121], "convert_id_to_token": [91, 96, 98, 122], "convert_to_numpi": [21, 94, 95, 97, 120, 121, 140], "convini": 124, "convsearch": 120, "coordin": 124, "copi": [135, 136], "core": 142, "corpu": [21, 39, 94, 95, 97, 98, 110, 112, 119, 120, 125, 127, 128, 131, 133, 135, 136, 138, 140, 141], "corpus_embd": [27, 32, 35, 39, 42], "corpus_embd_save_dir": [27, 32, 35, 39, 42], "corpus_embed": [110, 127, 133, 138], "corpus_s": 128, "correct": [121, 124, 141], "correctli": [125, 133, 141], "correl": [135, 136], "correspond": [110, 120, 121, 128, 130, 133], "cos_1": 124, "cos_dist1_2": 124, "cos_dist1_3": 124, "cosin": [106, 135, 136], "cosine_similar": 124, "cost": [105, 112, 119, 122, 129, 133, 140], "could": [110, 119, 129, 141, 142], "courpu": [110, 127], "cours": [110, 127, 140], "coursera": [110, 127], "cover": [24, 39, 105, 110, 112, 125, 131, 134], "coverag": 129, "covidretriev": 136, "cpu": [21, 22, 105, 114, 129, 130, 131, 133, 138, 140], "cqadupstack": [27, 134], "cqadupstackandroidretriev": [134, 135], "cqadupstackenglishretriev": [134, 135], "cqadupstackgamingretriev": [134, 135], "cqadupstackgisretriev": [134, 135], "cqadupstackmathematicaretriev": [134, 135], "cqadupstackphysicsretriev": [134, 135], "cqadupstackprogrammersretriev": [134, 135], "cqadupstackstatsretriev": [134, 135], "cqadupstacktexretriev": [134, 135], "cqadupstackunixretriev": [134, 135], "cqadupstackwebmastersretriev": [134, 135], "cqadupstackwordpressretriev": [134, 135], "crab": 140, "craft": 140, "cramp": 111, "creat": [10, 16, 59, 110, 119, 127, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142], "create_meta": [135, 136], "create_one_exampl": [0, 7, 14, 16], "create_retrieval_chain": 141, "create_stuff_documents_chain": 141, "creation": 131, "creativ": 140, "cross": [11, 60, 65, 70, 77, 106, 138], "crossdecodermodel": [49, 50, 51, 52, 54, 73, 74, 80, 82], "crossencodermodel": [49, 73, 85, 86, 87], "crucial": [45, 111, 129, 130, 133, 134], "cuda": [24, 27, 32, 35, 39, 42, 45, 99, 100, 101, 105], "cuda_visible_devic": 114, "cuisin": 140, "culinari": 140, "cumul": [125, 133], "cup": [32, 124], "current": [10, 17, 59, 60, 65, 70, 77, 125], "curri": 140, "curs": [119, 129], "custom": [13, 19, 21, 22, 140, 142], "cut": 140, "cut_off": [133, 138], "cutoff": [110, 125, 133, 134, 138], "cutoff_lay": [100, 101], "d": [121, 124, 128, 129, 130, 131, 133, 138, 140], "da": 140, "dai": [111, 119, 138], "daili": [135, 136, 140], "danc": [110, 127], "data": [9, 10, 12, 15, 16, 18, 24, 27, 32, 35, 39, 42, 55, 58, 59, 61, 71, 78, 83, 99, 100, 101, 102, 106, 112, 119, 127, 129, 130, 131, 133, 138], "data_arg": [12, 18, 55, 61, 66, 71, 78, 83, 88], "data_col": [13, 19, 56, 62, 67, 72, 79, 84, 89], "data_se": 69, "data_url": 131, "databas": [105, 141, 142], "datacol": [13, 19, 56, 62, 67, 72, 79, 84, 89], "dataload": [99, 100], "dataloader_drop_last": 69, "dataloader_num_work": [10, 59, 69], "dataloader_persistent_work": 69, "dataloader_pin_memori": 69, "dataloader_prefetch_factor": 69, "dataset": [0, 1, 10, 12, 13, 16, 18, 19, 32, 35, 39, 42, 45, 49, 50, 51, 56, 57, 61, 62, 67, 72, 79, 84, 89, 92, 93, 94, 95, 97, 98, 99, 100, 105, 106, 110, 112, 119, 121, 125, 128, 129, 134, 135, 141, 142], "dataset_dir": [27, 32, 35, 39, 42], "dataset_nam": [27, 32, 35, 39, 42], "dataset_revis": 134, "datset": 10, "dave": 35, "db": 141, "dbpedia": [134, 135], "dcg": [125, 133], "dcg_p": [125, 133], "ddp_backend": 69, "ddp_broadcast_buff": 69, "ddp_bucket_cap_mb": 69, "ddp_find_unused_paramet": 69, "ddp_timeout": 69, "de": 122, "debug": 69, "debug_util": 69, "debugopt": 69, "decid": 105, "decis": 10, "decod": [49, 50, 53, 54, 55, 58, 60, 61, 73, 76, 77, 78, 81, 82, 83, 94, 99, 100, 101, 129], "decoder_onli": [53, 54, 55, 56, 58, 59, 60, 61, 62, 76, 77, 78, 79, 81, 82, 83, 84, 94, 95, 99, 100, 101], "decoderonlyembeddericldataargu": [49, 50, 51, 57, 58, 59, 61], "decoderonlyembeddericlmodelargu": [49, 50, 51, 57, 58, 61], "decoderonlyembeddericlrunn": [49, 50, 51, 57, 61], "decoderonlyembeddericlsamedatasettraindataset": [49, 50, 51, 57, 61], "decoderonlyembeddericltrain": [49, 50, 51, 57, 61, 62], "decoderonlyembeddermodelargu": [49, 50, 51, 52, 53, 78], "decoderonlyembedderrunn": [49, 73, 74, 75, 78], "decoderonlyembeddertrain": [49, 73, 74, 75, 78, 79], "decoderonlyrerankerrunn": [49, 50, 51, 52, 55, 73, 74, 80, 83], "decoderonlyrerankertrain": [49, 50, 51, 52, 55, 56, 73, 74, 80, 83, 84], "decor": 140, "decreas": 121, "dedic": 111, "deep": [110, 127], "deepspe": 69, "def": [110, 121, 124, 125, 131, 133, 136, 138], "default": [10, 11, 13, 17, 19, 21, 22, 54, 59, 60, 65, 70, 71, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 128, 134, 142], "default_batch_s": [10, 59], "default_pooling_method": [91, 94, 95, 96, 97, 98], "defaultdict": 120, "defin": [111, 112, 120, 122, 124, 129], "definit": [111, 124, 141], "degrad": [21, 22, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 138], "delici": 140, "demand": 119, "demo": 107, "demonstr": [106, 119, 122, 131, 134], "denomin": [124, 125], "denot": 124, "dens": [70, 98, 105, 106, 119, 120, 121, 141], "dense_scor": 70, "dense_vec": [98, 112, 120, 122], "dense_weight": 70, "depend": [108, 112, 122, 127, 133, 136, 138], "deploi": [128, 138], "deprec": 101, "desc": [133, 138], "descend": 110, "descript": [111, 112, 114, 120, 138, 142], "design": [27, 45, 106, 134, 140], "destin": 131, "detach": 121, "detail": [16, 22, 112, 119, 120, 121, 136, 138, 141], "determin": [135, 136], "dev": [24, 27, 32, 39, 42, 133, 135, 138], "develop": [108, 117, 119, 120], "devic": [11, 21, 22, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 77, 92, 94, 95, 97, 98, 99, 100, 101, 102, 114, 128], "diagnosi": 111, "diagram": 129, "dict": [11, 13, 16, 17, 19, 21, 22, 54, 56, 60, 62, 65, 67, 69, 70, 71, 72, 77, 79, 82, 84, 87, 89, 95, 98], "dictionari": [13, 16, 19, 21, 22, 54, 70, 71, 87, 98, 120, 129], "differ": [32, 45, 98, 105, 106, 112, 119, 120, 121, 124, 125, 129, 131, 133, 134, 135, 136, 138, 140, 141, 143], "difficulti": 109, "digit": 119, "dim": [71, 121, 124, 127, 128, 133, 138, 142], "dimens": [98, 121, 129, 130, 131, 133, 142], "dimension": [106, 119, 129, 130, 142], "dine": 140, "dinner": 140, "dir": 71, "dir_to_fil": 142, "direct": 130, "directli": [106, 120, 124, 128, 129, 134, 135, 136, 138], "directori": [11, 17, 24, 27, 32, 35, 39, 42, 45, 60, 65, 70, 77, 94, 95, 97, 98, 99, 100, 101, 102, 127, 133, 141, 142], "disable_tqdm": 69, "disc": 111, "discount": [125, 133], "discrib": 129, "discript": [110, 127], "diseas": 111, "dish": 140, "disign": 138, "dispatch_batch": 69, "displai": 142, "dissimilar": 124, "dist": [124, 127], "distanc": [106, 112, 122, 128, 129, 130, 133, 135], "distil": [10, 11, 17, 59, 60, 65, 70, 77, 82], "distill_loss": [0, 7, 8, 11], "distinct": [110, 127, 140], "distinguish": [112, 120, 141], "distribut": [11, 105, 114, 120, 130, 131], "distroi": 129, "divers": [35, 39, 110, 120, 127, 141], "divic": 128, "divid": [124, 130], "do": [70, 105, 108, 119, 127, 128, 129, 133, 134, 135, 138], "do_ev": 69, "do_predict": 69, "do_train": 69, "doc": [24, 39, 125, 127, 140, 141], "doc_chain": 141, "doc_encod": 16, "docid": 39, "document": [10, 16, 17, 32, 39, 59, 82, 105, 106, 111, 112, 117, 119, 120, 122, 125, 133, 135, 136, 140, 142], "document_load": 141, "doe": [16, 105, 110, 124, 128, 129, 131, 141, 142], "dog": 119, "domain": [24, 35, 110, 127], "don": [120, 122, 135], "done": [130, 135, 136], "dot": 110, "dot_prod": 124, "downei": [110, 127], "download": [10, 21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 131, 133, 138, 141, 142], "downstream": [112, 122], "downtown": 140, "dpr": 105, "driven": [110, 127], "drop_threshold": [15, 58], "dropout": [121, 122], "dtype": [120, 124, 127, 131, 133, 138, 140], "due": [105, 111, 112, 122, 129], "dure": [11, 60, 65, 70, 77, 108, 114, 124, 131, 133, 138], "duretriev": 136, "dynam": 24, "e": [105, 106, 108, 128], "e_p": [112, 122], "e_q": [112, 122], "each": [21, 22, 32, 35, 94, 95, 97, 98, 99, 100, 101, 102, 110, 111, 112, 120, 121, 122, 125, 127, 128, 129, 130, 131, 133, 135, 136, 138, 140], "earli": 119, "earthi": 140, "easi": [45, 134, 138], "easier": 24, "easili": 134, "eat": 111, "ecomretriev": 136, "edg": 129, "edit": 108, "edmund": 35, "ef_construct": [129, 131], "ef_search": [129, 131], "efconstruct": [129, 131], "effect": [110, 111, 112, 125, 130, 133], "effici": [106, 111, 119, 129, 136, 138], "efsearch": [129, 131], "eight": [45, 134], "either": [112, 122, 124], "element": [13, 19, 110, 129, 130, 131], "elementwise_affin": [121, 122], "elif": 121, "els": [121, 125, 135], "emb": [119, 127, 140, 141, 142], "embed": [11, 12, 17, 21, 27, 45, 60, 65, 66, 70, 77, 78, 92, 94, 95, 97, 98, 105, 106, 107, 109, 111, 112, 114, 115, 117, 121, 122, 124, 125, 128, 129, 134, 135, 136, 140, 141, 142, 143], "embed_model": 142, "embedcol": [10, 59], "embedd": [0, 7, 10, 11, 12, 13, 15, 21, 24, 27, 32, 35, 39, 42, 45, 49, 53, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 77, 78, 79, 91, 92, 94, 95, 97, 98, 107, 117], "embedder_name_or_path": [24, 27, 32, 35, 39, 42, 45], "embedder_passage_max_length": 39, "embeddermodelclass": 92, "embedderoutput": [0, 7, 8, 13, 70], "embeddertrainercallbackfordatarefresh": [0, 7, 8], "embedding_1": 124, "embedding_2": 124, "embedding_3": 124, "embedding_model": 141, "embeddings_1": [109, 111, 122], "embeddings_2": [109, 111, 122], "embeed": 130, "eminem": [110, 127], "emotionclassif": 135, "en": [24, 27, 35, 42, 45, 95, 109, 110, 114, 115, 119, 120, 121, 124, 127, 133, 134, 135, 138, 140, 141, 142], "enabl": [17, 60, 65, 70, 77, 106, 111, 112, 119, 130], "enable_input_require_grad": [0, 7, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "encod": [0, 7, 8, 9, 11, 14, 16, 17, 20, 21, 22, 49, 50, 51, 52, 54, 56, 57, 60, 62, 64, 65, 67, 68, 70, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 87, 88, 89, 91, 94, 95, 96, 97, 98, 102, 105, 106, 110, 112, 114, 119, 120, 122, 124, 125, 127, 133, 136, 138, 140], "encode_corpu": [0, 20, 21, 91, 94, 95, 96, 97, 98, 111], "encode_kei": 120, "encode_kwarg": 141, "encode_multi_process": [0, 20, 21, 22], "encode_psg": 16, "encode_qri": 16, "encode_queri": [0, 20, 21, 91, 94, 95, 96, 97, 98, 111, 120, 127, 133, 138, 140], "encode_queries_single_devic": [91, 95, 96], "encode_single_devic": [0, 20, 21, 91, 94, 95, 96, 97, 98], "encoder_onli": [65, 66, 67, 69, 70, 71, 72, 87, 88, 89, 97, 98, 102], "encoderonlyembedderm3model": [49, 50, 63, 68], "encoderonlyembedderm3modelargu": [49, 50, 63, 68, 69, 71], "encoderonlyembedderm3modelforinfer": [49, 50, 63, 68], "encoderonlyembedderm3runn": [49, 50, 63, 68, 71], "encoderonlyembedderm3train": [49, 50, 63, 68, 71, 72], "encoderonlyembedderm3trainingargu": [49, 50, 63, 68, 69, 71], "encoderonlyembedderrunn": [49, 50, 63, 64, 66], "encoderonlyembeddertrain": [49, 50, 63, 64, 66, 67], "encoderonlyrerankerrunn": [49, 73, 85, 86, 88], "encoderonlyrerankertrain": [49, 73, 85, 86, 88, 89], "encourag": 135, "end": [10, 121], "endem": 138, "eng": [45, 134, 135], "engin": [135, 142], "england": 140, "english": [111, 114, 120, 134, 135, 136, 138], "enhanc": [95, 111, 112, 114, 120], "enjoi": 124, "enough": [110, 119, 129, 135, 140], "ensembl": 70, "ensemble_scor": [49, 50, 63, 68, 70], "entir": [112, 119, 122], "entiti": 35, "entri": 129, "entropi": [60, 65, 70, 77], "enumer": [110, 125, 127, 133, 138], "env": [127, 128], "environ": [110, 114, 119, 120, 121, 122, 127, 128, 133, 134, 135, 138, 140, 141, 142], "ep": [121, 122], "epoch": 10, "equal": [105, 135, 136], "era": 106, "etc": [106, 125, 140], "euc_dist1_2": 124, "euc_dist1_3": 124, "euclidean": [106, 129, 131], "eval": [121, 122, 125], "eval_accumulation_step": 69, "eval_air_bench": 24, "eval_beir": 27, "eval_dataset": [13, 19, 56, 62, 67, 72, 79, 84, 89], "eval_delai": 69, "eval_do_concat_batch": 69, "eval_metr": [27, 32, 35, 39, 42], "eval_miracl": 32, "eval_mkqa": 35, "eval_mldr": 39, "eval_msmarco": 42, "eval_mteb": 45, "eval_nam": [27, 32, 35, 39, 42, 45], "eval_on_start": 69, "eval_output_method": [27, 32, 35, 39, 42], "eval_output_path": [27, 32, 35, 39, 42, 45], "eval_split": 135, "eval_step": 69, "eval_strategi": 69, "eval_use_gather_object": 69, "evaldenseretriev": [0, 1], "evalpredict": [13, 19, 56, 62, 67, 72, 79, 84, 89], "evalrerank": [0, 1], "evalretriev": [0, 1], "evalu": [0, 24, 27, 32, 35, 39, 42, 45, 105, 107, 112, 117, 131, 134], "evaluation_strategi": 69, "evaluation_tim": 134, "even": [106, 124, 129, 131, 133, 135], "event": 10, "everi": [11, 17, 70, 82], "every_sav": 69, "everyth": 141, "everywher": 140, "exacerb": 111, "exactli": 121, "exampl": [16, 24, 27, 32, 35, 39, 42, 45, 95, 106, 111, 112, 114, 117, 119, 121, 125, 130, 135, 138, 142], "example_id": 35, "example_passage_max_len": 58, "example_query_max_len": 58, "examples_for_task": [95, 111], "examples_instruction_format": [95, 111], "excel": 119, "except": 140, "excit": [117, 140], "execut": [12, 18], "exhaust": 133, "exist": [112, 122, 135], "expand": [117, 124], "expect": [111, 121, 140], "experi": [131, 133, 135, 140], "expert": [110, 127], "explan": 141, "explor": [117, 129], "export": 109, "express": 124, "exquisit": 140, "extend": [21, 22, 112], "extens": 129, "extern": 106, "extra": [119, 140], "extrem": [119, 128, 131], "extremli": 106, "f": [110, 119, 120, 121, 122, 124, 125, 127, 129, 130, 131, 133, 136, 138], "f1": [135, 136], "f_": [112, 122], "face": [109, 116], "facilit": [111, 138], "factor": [111, 129, 130], "factori": [9, 15, 53, 58, 69, 76, 81], "fail": 119, "fair": 140, "fairli": 135, "faiss": [105, 131, 133, 138, 140, 141, 142], "faiss_index": 142, "faissvectorstor": 142, "fake": 128, "fall": [124, 129], "fals": [9, 11, 13, 15, 19, 22, 24, 27, 32, 35, 39, 53, 58, 60, 65, 69, 70, 71, 76, 77, 81, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 120, 121, 122, 125, 133], "famili": 129, "familiar": [117, 138], "famou": [106, 110, 127, 140], "faq": 117, "fast": [119, 127, 138, 140], "faster": [24, 114, 135], "favor": 140, "favorit": 124, "featur": [10, 11, 16, 17, 54, 60, 65, 70, 77, 82, 87, 106, 119, 140], "feed": [11, 60, 65, 70, 77, 109], "feel": [120, 121, 133, 138], "fei": [110, 127], "femal": [110, 111, 127], "fetch": [120, 122], "fever": [134, 135], "few": [95, 111, 114, 124, 127, 129], "fidel": 129, "field": 119, "fight": [110, 127], "figur": [106, 110, 127, 140], "fil": 140, "file": [119, 120, 122, 129, 130, 131, 134, 141, 142], "file_path": [10, 16], "fill": [119, 140, 141, 142], "film": [110, 127], "fin": 122, "final": [10, 110, 112, 122, 140, 142], "find": [105, 117, 119, 133, 135, 136], "fine": [12, 18, 107, 112, 120, 122, 135], "finest": 140, "finetun": [0, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 108, 117], "finish": 135, "fiqa": 27, "fiqa2018": [134, 135], "fire": 140, "first": [13, 19, 45, 98, 106, 109, 110, 114, 116, 119, 120, 121, 124, 125, 127, 128, 129, 130, 133, 134, 136, 138, 140, 141, 142], "firstli": [112, 122], "fit": [129, 131], "fix": 130, "fix_encod": 69, "fix_position_embed": 69, "flag_dres_model": 136, "flagautomodel": [91, 109], "flagautorerank": 91, "flagdresmodel": 136, "flagembed": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 109, 110, 111, 112, 114, 117, 119, 120, 121, 122, 124, 127, 133, 136, 138, 140], "flagiclmodel": 111, "flagmodel": [110, 114, 119, 120, 121, 124, 127, 133, 138, 140], "flagopen": 108, "flagrerank": 138, "flat": [127, 128, 129, 130, 133, 138], "flavor": 140, "flexibl": 111, "float": [9, 10, 11, 15, 21, 22, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 92, 93, 94, 97, 98, 99, 100, 101, 102, 121, 130], "float32": [120, 124, 127, 128, 131, 133, 138], "focu": 140, "focus": 32, "folder": [117, 143], "follow": [35, 95, 106, 110, 112, 119, 120, 121, 122, 124, 125, 127, 131, 133, 135, 136, 138, 141, 142], "food": 140, "footprint": 131, "forc": 131, "form": [125, 129, 133], "format": [10, 21, 22, 59, 95, 111, 140], "forward": [0, 7, 8, 11, 14, 17, 49, 50, 63, 68, 70, 73, 74, 80, 82], "found": [10, 16, 32, 120, 140], "foundat": [110, 127], "fp16": [69, 105], "fp16_backend": 69, "fp16_full_ev": 69, "fp16_opt_level": 69, "frac": [112, 122, 124, 125, 133], "framework": [45, 134, 141, 142], "free": [119, 120, 121, 133, 138], "freedom": 138, "freeli": 119, "freeman": [110, 127], "french": 140, "frequenc": [119, 128], "frequent": 117, "freshest": 140, "fri": 140, "from": [10, 11, 16, 21, 22, 35, 39, 54, 70, 71, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 106, 109, 110, 111, 112, 114, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 141, 142], "from_default": 142, "from_docu": [141, 142], "from_exist": 135, "from_finetun": [91, 92, 93, 109], "from_numpi": 124, "from_peft": [53, 58, 76, 81], "from_pretrain": [121, 122], "from_raw_model": 81, "from_templ": 141, "front": [119, 120], "fsdp": 69, "fsdp_config": 69, "fsdp_min_num_param": 69, "fsdp_transformer_layer_cls_to_wrap": 69, "fsdpoption": 69, "full": [105, 120, 121, 130, 133, 134, 135], "full_determin": 69, "fulli": 111, "function": [11, 70, 97, 105, 117, 120, 121, 128, 129, 133, 138, 141, 142], "fundament": 129, "further": 105, "futur": 127, "g": [105, 106, 128], "gain": [125, 133], "gather": 11, "gb": [111, 112, 114, 120], "ge": 122, "geluactiv": [121, 122], "gemma": 138, "gemma2": 138, "gener": [24, 32, 39, 45, 105, 110, 111, 112, 115, 119, 121, 122, 129, 131, 134, 135], "genu": 138, "geoffrei": [110, 127], "geometr": 124, "get": [10, 11, 22, 60, 65, 70, 71, 77, 92, 97, 98, 105, 107, 109, 110, 112, 116, 117, 121, 122, 124, 125, 127, 129, 133, 135, 138], "get_detailed_exampl": [91, 95, 96], "get_detailed_input": [0, 20, 22], "get_detailed_instruct": [0, 20, 21, 22], "get_local_scor": [0, 7, 8, 11], "get_model": [49, 50, 63, 68, 71, 135], "get_prompt": 142, "get_target_devic": [0, 20, 21, 22], "get_task": [134, 136], "get_templ": 142, "get_text_embed": 142, "giant": 138, "git": 108, "github": [105, 108, 116, 117, 120, 135, 141, 142, 143], "give": [112, 122, 131, 140, 141, 142], "given": [10, 32, 95, 98, 111, 120, 125, 129, 133, 136, 141, 142], "global": [110, 127, 129, 142], "go": [121, 124, 129, 135, 136, 138, 140, 142], "goal": [135, 136], "good": [131, 133, 140], "googl": 35, "got": 110, "goto": 136, "govern": 111, "gpt": [39, 110, 119, 127, 140, 141, 142], "gpu": [21, 22, 99, 100, 101, 105, 108, 114, 119, 121, 129, 130, 131, 133, 135, 136], "gpucloneropt": 128, "gpumultiplecloneropt": [127, 128], "gpuresourc": 128, "gpuresourcesvector": 128, "grade": [125, 133], "gradient": [17, 60, 65, 70, 77], "gradient_accumulation_step": 69, "gradient_checkpoint": 69, "gradient_checkpointing_en": [0, 7, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77], "gradient_checkpointing_kwarg": 69, "grain": [112, 122], "gram": [111, 119], "grammi": [110, 127], "granular": [120, 141, 142], "granularityi": 120, "graph": 129, "great": [106, 128, 129, 131, 140, 142], "greater": 129, "greater_is_bett": 69, "ground": [110, 131, 133], "ground_truth": [110, 125, 133, 138], "group": [10, 11, 114, 116, 119, 129], "group_by_length": 69, "group_siz": 11, "guarante": [129, 131], "guidanc": 117, "guidelin": 111, "h5py": 131, "h_p": [112, 122], "h_q": [112, 122], "ha": [35, 106, 111, 119, 120, 121, 122, 124, 129, 131], "had": 110, "half": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102], "half_precision_backend": 69, "hallucin": 142, "ham": 129, "hand": [116, 117, 143], "handl": [111, 121], "happen": 141, "happi": 119, "hard": 141, "hardwar": [99, 100, 101, 111], "hash": 129, "hashtabel": 129, "have": [24, 105, 106, 110, 112, 116, 119, 121, 124, 125, 127, 129, 133, 134, 135, 138, 141, 142], "hawaii": 124, "hdf5": 131, "he": 110, "head_multi": 81, "head_typ": 81, "healthcar": 111, "hear": 35, "heavi": [111, 112, 122], "hello": [114, 142], "help": [24, 111, 140, 142], "helper": 70, "her": [110, 124, 127], "here": [110, 117, 121, 122, 127, 130, 131, 136, 141, 142], "herniat": 111, "heterogen": [24, 27], "hf": [10, 16, 71, 92, 93, 94, 95, 97, 98, 109, 121, 135, 136], "hf_endpoint": 109, "hf_subset": 134, "hi": [32, 39, 110, 124, 127], "hidden": [60, 65, 70, 77, 92, 97, 98, 112, 121, 122], "hidden_s": 98, "hidden_st": 70, "hierarch": 129, "high": [106, 128, 133, 142], "higher": [110, 119, 129], "highest": 111, "highli": [112, 136, 143], "hinton": [110, 127], "hit": 125, "hnsw": 129, "hold": [45, 116], "holidai": 124, "hollywood": [110, 127], "hopefulli": 138, "hot": 119, "hotpot": 140, "hotpotqa": [134, 135], "hous": 140, "how": [13, 19, 45, 105, 106, 110, 111, 119, 120, 121, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 138, 140, 141, 142], "howev": 119, "http": [108, 109, 131, 141], "hub": [10, 21, 22, 24, 27, 32, 35, 39, 42, 45, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 135, 136], "hub_always_push": 69, "hub_model_id": 69, "hub_private_repo": 69, "hub_strategi": 69, "hub_token": 69, "hubstrategi": 69, "hug": [109, 116], "huge": [119, 141], "huggingfac": [21, 22, 24, 27, 32, 35, 39, 42, 45, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 120, 133, 141, 142], "huggingfaceembed": [141, 142], "human": [24, 119, 135], "i": [11, 13, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 92, 93, 105, 106, 110, 111, 112, 114, 115, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142], "i_truth": 131, "ic": 140, "icl": [49, 50, 51, 58, 59, 60, 61, 62, 95, 115, 120], "icl_suffix_str": 58, "iclllmembedd": [91, 96], "icon": [110, 127], "id": [70, 98, 120, 125, 127, 138], "idcg": [125, 133], "idcg_p": [125, 133], "idea": [110, 116, 135], "ideal": [125, 133], "ident": [128, 138], "idf": 119, "idx": [133, 138], "iflytek": 136, "ignore_data_skip": 69, "ignore_identical_id": 27, "imag": [106, 119], "imagenet": [110, 127], "imdbclassif": 135, "implement": [21, 22, 60, 65, 70, 77, 97, 121, 136], "import": [109, 110, 111, 112, 114, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142], "imposs": 24, "improp": 111, "improv": [45, 112, 119, 122, 134], "in_featur": [121, 122], "includ": [111, 117, 119, 140], "include_inputs_for_metr": 69, "include_num_input_tokens_seen": 69, "include_tokens_per_second": 69, "incom": 129, "increas": [111, 129], "indeci": 110, "independ": [21, 22], "index": [10, 59, 110, 124], "index_cpu_to_all_gpu": [127, 128], "index_cpu_to_gpu": 128, "index_cpu_to_gpu_multipl": 128, "index_factori": [127, 128, 133, 138], "index_gpu": 128, "indexflat": 130, "indexflatip": [128, 129, 140], "indexflatl2": [129, 131, 142], "indexhnswflat": [129, 131], "indexivfflat": [129, 131], "indexivfpq": 130, "indexivfscalarquant": 130, "indexlsh": 131, "indexpq": [130, 131], "indexscalarquant": [130, 131], "indic": [110, 124, 125, 127, 130, 141], "industri": 128, "ineffici": 119, "inevit": 114, "infect": 111, "infer": [0, 21, 22, 70, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 107, 108, 114, 117, 119, 120, 133, 138], "inflammatori": 111, "inform": [11, 24, 27, 32, 42, 110, 112, 117, 119, 125, 131, 133, 140, 141, 142], "infti": 124, "ingredi": 140, "init": 142, "initi": [106, 114, 120, 128, 134, 136, 141, 142], "inner": [60, 65, 70, 77, 109, 110, 112, 122, 129, 133], "innov": [110, 127, 140], "inplac": [121, 122], "input": [10, 11, 13, 16, 17, 19, 21, 22, 54, 60, 65, 70, 77, 82, 87, 94, 95, 97, 98, 99, 100, 101, 102, 106, 112, 119, 120, 121, 122, 127, 135, 136, 138, 141], "input_id": [70, 121], "input_queu": [21, 22], "input_was_str": 121, "inspect": 10, "instal": [107, 110, 119, 120, 125, 127, 129, 130, 131, 133, 138, 140, 141, 142], "instanc": [12, 18, 55, 61, 66, 71, 78, 83, 88, 125, 133, 134], "instead": [101, 109, 114, 121, 130, 141], "instruct": [10, 21, 22, 59, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 111, 114, 119, 120, 136], "instruction_format": [21, 22, 95], "int": [9, 10, 11, 15, 16, 17, 21, 22, 53, 54, 58, 59, 60, 65, 69, 70, 71, 76, 77, 81, 82, 87, 94, 95, 97, 98, 99, 100, 101, 102, 120, 125, 133, 136, 138], "int32vector": 128, "integ": [21, 22, 131], "integr": [106, 112, 122, 142], "intellig": [117, 120], "interact": [112, 122], "interest": [117, 124, 125], "interfac": 111, "interg": 130, "intermedi": [121, 122], "intermediate_act_fn": [121, 122], "intern": [21, 22], "intersect": [124, 131], "intersect1d": [125, 131, 133, 138], "intervalstrategi": 69, "intervent": 24, "introduc": [45, 120, 124, 127, 130, 134], "introduct": [117, 143], "intuit": 119, "invalid": 11, "inventor": 110, "invert": [129, 130], "invok": 141, "involv": [125, 133], "ip": 130, "ir": 27, "iron": [110, 127], "irrelev": [135, 136], "is_train": 127, "isin": [125, 133, 138], "isinst": 121, "isol": 111, "issu": [105, 111, 114, 120, 124], "italian": 140, "item": [122, 124, 125], "iter": [21, 94, 95, 97, 98, 99, 100, 101, 102, 110], "iterabledataset": [13, 19, 56, 62, 67, 72, 79, 84, 89], "its": [110, 112, 114, 120, 122, 127, 128, 130, 133, 134, 135, 136, 140, 141], "itself": 128, "ivf": 129, "ivfflatl2": 131, "j": [110, 112, 122, 124, 125, 133, 138], "ja": 35, "jaccard_similar": 124, "jackson": [110, 127], "japanes": 140, "japenes": 140, "jdreview": 136, "jit_mode_ev": 69, "jjiga": 140, "joe": 140, "join": [105, 116, 117], "joint": [112, 122], "jointli": 106, "jr": [110, 127], "json": [45, 134], "just": [70, 105, 122, 124, 127, 128, 129, 134, 135], "k": [110, 125, 127, 129, 130, 131, 133, 135, 136, 138], "k_valu": [27, 32, 35, 39, 42], "kd_loss_typ": [11, 60, 65, 69, 70, 77], "keepdim": 121, "kei": [106, 110, 119, 120, 121, 122, 140, 141, 142], "kernal": 128, "kernel": [127, 128], "key_embed": 120, "keyword": 117, "kg_co2_emiss": 134, "kind": [119, 140], "kitti": 119, "kl_div": [11, 60, 65, 69, 77], "knn": 127, "knock": 35, "know": [110, 117, 121, 140, 141, 142], "knowledg": [11, 17, 60, 65, 70, 77, 82, 110, 117, 127, 142], "knowledge_distil": [9, 15, 58], "known": [32, 45, 110, 127, 129, 134], "korean": 140, "kwarg": [10, 11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 136], "l2": [112, 122, 124, 130], "l6": 119, "label": [32, 110, 125, 133, 135, 136, 138], "label_nam": 69, "label_pad_token_id": 16, "label_smoothing_factor": 69, "lack": 111, "lambda": 110, "lambdalr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "land": 129, "langchain_commun": 141, "langchain_cor": 141, "langchain_huggingfac": 141, "langchain_openai": 141, "languag": [24, 32, 35, 39, 42, 45, 105, 111, 112, 114, 119, 120, 124, 134, 135, 138, 141], "larg": [27, 42, 45, 110, 114, 119, 120, 121, 122, 124, 128, 129, 131, 134, 138, 142], "larger": [112, 119, 124, 129], "largest": [136, 138], "last": [60, 65, 69, 70, 77, 92, 97, 98, 111, 121, 128, 131, 135], "last_hidden_st": [60, 65, 70, 77, 97, 121], "last_token": [60, 77], "late": [112, 122], "later": 141, "latest": [45, 127, 128, 134], "latn": 134, "laxic": 98, "layer": [82, 100, 101, 112, 121, 122, 129, 138], "layernorm": [121, 122], "layerwis": [49, 73, 74, 81, 82, 83, 84, 100, 138], "layerwisellmrerank": [91, 103], "lcqmc": 136, "lead": [105, 110, 124, 127, 128, 138], "leader": 111, "leaderboard": [45, 134], "learn": [110, 111, 120, 121, 124, 125, 127, 133, 141, 142], "learnabl": [112, 122], "learner": 111, "learning_r": 69, "legendari": [110, 127], "len": [110, 119, 122, 124, 125, 131, 133, 138, 142], "length": [21, 22, 69, 94, 95, 97, 98, 99, 100, 101, 102, 110, 119, 120, 122, 127, 133, 138], "length_column_nam": 69, "lengthi": 39, "less": [131, 138], "let": [110, 119, 121, 124, 127, 128, 134, 135, 138, 140, 141, 142], "level": 111, "leverag": 111, "lex": [112, 122], "lexic": [98, 105, 112, 122], "lexical_weight": [98, 112, 120, 122], "lexical_weights_1": 98, "lexical_weights_2": 98, "li": [110, 127], "librari": 119, "licens": 119, "lift": 111, "light": 101, "lightweight": [101, 138], "lightweightllmrerank": [91, 103], "like": [39, 94, 99, 100, 101, 110, 111, 114, 119, 120, 127, 133, 134, 141, 142], "limit": [119, 129], "line": [110, 127, 133], "linear": [69, 71, 98, 112, 121, 122, 129], "lingual": [105, 120, 141, 142], "link": [112, 114, 135, 136], "linux": [128, 129, 130, 131], "list": [10, 11, 13, 16, 17, 19, 21, 22, 32, 53, 56, 58, 59, 60, 62, 65, 67, 69, 70, 72, 76, 77, 79, 81, 82, 84, 89, 92, 94, 95, 97, 98, 99, 100, 101, 102, 110, 121, 125, 129, 133, 134, 135, 136, 138, 140], "liter": [21, 22, 98], "littl": 110, "live": [138, 140], "ll": [111, 119, 125, 127, 128, 131, 134], "llama": 142, "llama_index": 142, "llm": [16, 24, 94, 99, 100, 101, 106, 141, 142], "llmembedd": 120, "load": [10, 12, 16, 18, 21, 22, 55, 61, 66, 71, 78, 83, 88, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 109, 114, 119, 120, 121, 127, 131, 134, 135, 136, 141, 142], "load_best_model_at_end": 69, "load_data": 142, "load_data_col": [0, 7, 8, 12, 14, 18], "load_dataset": [133, 138], "load_tokenizer_and_model": [0, 7, 8, 12, 14, 18, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "load_train": [0, 7, 8, 12, 14, 18, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "load_train_dataset": [0, 7, 8, 12, 14, 18, 49, 50, 51, 57, 61], "loader": [0, 1, 141], "lobster": 140, "local": [11, 21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 127, 129, 133, 141], "local_rank": 69, "locat": 140, "log_2": [125, 133], "log_level": 69, "log_level_replica": 69, "log_on_each_nod": 69, "logging_dir": 69, "logging_first_step": 69, "logging_nan_inf_filt": 69, "logging_step": 69, "logging_strategi": 69, "logic": 111, "logist": [135, 136], "logit": [54, 87], "long": [24, 39, 105, 112, 120, 122, 131, 140], "longer": [105, 129, 131], "look": [39, 110, 117, 119, 124, 131, 134, 135], "loop": [10, 127], "lora_alpha": [53, 58, 76, 81], "lora_dropout": [53, 58, 76, 81], "lora_rank": [53, 58, 76, 81], "lose": [124, 131], "loss": [11, 13, 17, 19, 60, 65, 70, 77, 131], "lot": [119, 142], "love": [119, 121], "low": [119, 130], "lower": 142, "lr_scheduler_kwarg": 69, "lr_scheduler_typ": 69, "lrlm": 120, "lsh": 129, "lstm": 119, "luxuri": 140, "m": [24, 27, 32, 35, 39, 42, 45, 112, 122, 124, 125, 128, 129, 130, 131, 133, 138, 140], "m3": [24, 27, 32, 35, 39, 42, 49, 50, 63, 69, 70, 71, 72, 98, 105, 115, 138, 141, 142], "m3_kd_loss": [11, 70], "m3embedd": [91, 96], "machin": [42, 111, 121, 133, 135, 141, 142], "made": 124, "magic": 141, "magnitud": 124, "mai": [111, 124, 129, 141], "main": [45, 125, 133, 134, 135, 136], "main_scor": 134, "mainli": 129, "maintain": [120, 127, 128, 129], "major": 105, "make": [24, 114, 119, 121, 122, 125, 127, 128, 129, 133, 135, 140, 141], "man": [110, 127], "manag": 111, "manhattan": 140, "mani": [105, 117], "manual": 131, "map": [105, 106, 114, 119, 120, 130, 135, 136], "map_at_1": 134, "map_at_10": 134, "map_at_100": 134, "map_at_1000": 134, "map_at_20": 134, "map_at_3": 134, "map_at_5": 134, "marathon": 111, "marco": [42, 133, 138], "markdown": [27, 32, 35, 39, 42], "marvel": [110, 127], "masa": 140, "masayoshi": 140, "mask": [60, 65, 70, 77, 97], "massiv": [45, 134], "massiveintentclassif": 135, "massivescenarioclassif": 135, "match": [98, 105, 112, 119, 122, 141, 142], "materi": 116, "mathc": 122, "matrix": [60, 65, 70, 77, 112, 122], "max": [112, 122, 125, 130, 133, 138], "max_": [112, 122], "max_example_num_per_dataset": [9, 15, 58], "max_grad_norm": 69, "max_len": 9, "max_length": [10, 16, 21, 22, 59, 94, 95, 97, 98, 99, 100, 101, 102, 120, 121, 122], "max_passage_length": 98, "max_query_length": 98, "max_step": 69, "maxim": 129, "maximum": [21, 22, 94, 95, 97, 98, 99, 100, 101, 102, 112, 122, 125, 133, 138, 141, 142], "mb": [114, 120], "mc4": 39, "mcl": 112, "md": [27, 32, 35, 39, 42, 135, 136], "mean": [106, 110, 121, 124, 125, 129, 133, 135, 136], "measur": [124, 125, 133, 135, 136], "meat": 140, "mechan": 124, "medicalretriev": 136, "medrxivclusteringp2p": 135, "medrxivclusterings2": 135, "meet": 111, "melanoleuca": 138, "member": 138, "memori": [119, 129, 130, 131], "menstrual": 111, "menu": 140, "messag": [116, 140], "metadata": 141, "method": [0, 1, 7, 8, 14, 20, 49, 50, 51, 52, 57, 63, 64, 68, 73, 74, 75, 80, 85, 86, 91, 96, 103, 105, 112, 119, 121, 122, 124, 129, 140, 141], "metric": [106, 110, 124, 127, 129, 130, 131, 133, 134, 135, 136, 138], "metric_for_best_model": 69, "metric_inner_product": [127, 133, 138], "metric_l2": [128, 130, 131], "michael": [110, 127], "microsoft": 42, "midtown": 140, "might": [110, 119, 127, 128], "million": 127, "mimic": 111, "min": [125, 133, 138], "mind": 141, "mindsmallrerank": 135, "mini": [135, 136, 140, 141, 142], "minicpm": 138, "minilm": 119, "minimum": 125, "minut": 110, "miracl": 23, "miracl_eval_result": 32, "mirror": 109, "mitr": 140, "mkqa": 23, "mkqa_eval_result": 35, "mldr": 23, "mldr_eval_result": 39, "mm": 124, "mmarcorerank": 136, "mmarcoretriev": 136, "modal": 142, "mode": 108, "model": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 27, 32, 35, 39, 42, 45, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 121, 122, 124, 125, 127, 129, 133, 134, 135, 138, 140, 141, 142, 143], "model_arg": [12, 18, 55, 61, 66, 71, 78, 83, 88], "model_cache_dir": 24, "model_card": [135, 136], "model_class": [92, 93], "model_init": [13, 19, 56, 62, 67, 72, 79, 84, 89], "model_nam": [134, 135, 136, 141, 142], "model_name_or_path": [9, 15, 21, 22, 53, 58, 69, 71, 76, 81, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 136], "model_output": 121, "model_revis": [134, 135], "model_typ": [9, 76, 81], "modern": [27, 119], "modifi": [141, 142], "modul": [13, 19, 56, 62, 67, 72, 79, 84, 89], "modulelist": [121, 122], "modules_to_sav": [53, 58, 76, 81], "more": [105, 106, 110, 111, 112, 114, 116, 117, 119, 120, 121, 124, 129, 131, 138, 140, 141, 142], "morgan": [110, 127], "most": [110, 114, 119, 124, 134, 140, 141, 142], "mountain": 111, "mp_paramet": 69, "mrr": [110, 135, 136], "mrr_at_1": 134, "mrr_at_10": 134, "mrr_at_100": 134, "mrr_at_1000": 134, "mrr_at_20": 134, "mrr_at_3": 134, "mrr_at_5": 134, "mrr_init": 138, "mrr_rerank": 138, "msmarco": [23, 133, 134, 135, 138], "msmarco_eval_result": 42, "mteb": [23, 111, 114], "mteb_eval_result": 45, "mteb_main_en": 135, "mteb_vers": 134, "mtopdomainclassif": 135, "mtopintentclassif": 135, "much": [111, 131], "mul": [112, 122], "multi": [10, 21, 22, 59, 98, 105, 114, 120, 129, 141, 142], "multilingu": [32, 39, 120, 122, 138], "multilingualsenti": 136, "multimod": 142, "multipl": [21, 22, 105, 111, 112, 122, 125, 142], "multiscal": 142, "multiv": 112, "muscl": 111, "music": [110, 127], "must": 70, "my": 124, "mymodel": 136, "n": [9, 95, 111, 112, 119, 120, 121, 122, 124, 125, 127], "name": [21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 130], "namespac": [133, 138], "nanswer": 127, "narr": [110, 127], "narrow": 140, "nativ": [32, 138], "natur": [35, 42, 119, 124, 134, 141], "nauc_map_at_1000_diff1": 134, "nauc_map_at_1000_max": 134, "nauc_map_at_1000_std": 134, "nauc_map_at_100_diff1": 134, "nauc_map_at_100_max": 134, "nauc_map_at_100_std": 134, "nauc_map_at_10_diff1": 134, "nauc_map_at_10_max": 134, "nauc_map_at_10_std": 134, "nauc_map_at_1_diff1": 134, "nauc_map_at_1_max": 134, "nauc_map_at_1_std": 134, "nauc_map_at_20_diff1": 134, "nauc_map_at_20_max": 134, "nauc_map_at_20_std": 134, "nauc_map_at_3_diff1": 134, "nauc_map_at_3_max": 134, "nauc_map_at_3_std": 134, "nauc_map_at_5_diff1": 134, "nauc_map_at_5_max": 134, "nauc_map_at_5_std": 134, "nauc_mrr_at_1000_diff1": 134, "nauc_mrr_at_1000_max": 134, "nauc_mrr_at_1000_std": 134, "nauc_mrr_at_100_diff1": 134, "nauc_mrr_at_100_max": 134, "nauc_mrr_at_100_std": 134, "nauc_mrr_at_10_diff1": 134, "nauc_mrr_at_10_max": 134, "nauc_mrr_at_10_std": 134, "nauc_mrr_at_1_diff1": 134, "nauc_mrr_at_1_max": 134, "nauc_mrr_at_1_std": 134, "nauc_mrr_at_20_diff1": 134, "nauc_mrr_at_20_max": 134, "nauc_mrr_at_20_std": 134, "nauc_mrr_at_3_diff1": 134, "nauc_mrr_at_3_max": 134, "nauc_mrr_at_3_std": 134, "nauc_mrr_at_5_diff1": 134, "nauc_mrr_at_5_max": 134, "nauc_mrr_at_5_std": 134, "nauc_ndcg_at_1000_diff1": 134, "nauc_ndcg_at_1000_max": 134, "nauc_ndcg_at_1000_std": 134, "nauc_ndcg_at_100_diff1": 134, "nauc_ndcg_at_100_max": 134, "nauc_ndcg_at_100_std": 134, "nauc_ndcg_at_10_diff1": 134, "nauc_ndcg_at_10_max": 134, "nauc_ndcg_at_10_std": 134, "nauc_ndcg_at_1_diff1": 134, "nauc_ndcg_at_1_max": 134, "nauc_ndcg_at_1_std": 134, "nauc_ndcg_at_20_diff1": 134, "nauc_ndcg_at_20_max": 134, "nauc_ndcg_at_20_std": 134, "nauc_ndcg_at_3_diff1": 134, "nauc_ndcg_at_3_max": 134, "nauc_ndcg_at_3_std": 134, "nauc_ndcg_at_5_diff1": 134, "nauc_ndcg_at_5_max": 134, "nauc_ndcg_at_5_std": 134, "nauc_precision_at_1000_diff1": 134, "nauc_precision_at_1000_max": 134, "nauc_precision_at_1000_std": 134, "nauc_precision_at_100_diff1": 134, "nauc_precision_at_100_max": 134, "nauc_precision_at_100_std": 134, "nauc_precision_at_10_diff1": 134, "nauc_precision_at_10_max": 134, "nauc_precision_at_10_std": 134, "nauc_precision_at_1_diff1": 134, "nauc_precision_at_1_max": 134, "nauc_precision_at_1_std": 134, "nauc_precision_at_20_diff1": 134, "nauc_precision_at_20_max": 134, "nauc_precision_at_20_std": 134, "nauc_precision_at_3_diff1": 134, "nauc_precision_at_3_max": 134, "nauc_precision_at_3_std": 134, "nauc_precision_at_5_diff1": 134, "nauc_precision_at_5_max": 134, "nauc_precision_at_5_std": 134, "nauc_recall_at_1000_diff1": 134, "nauc_recall_at_1000_max": 134, "nauc_recall_at_1000_std": 134, "nauc_recall_at_100_diff1": 134, "nauc_recall_at_100_max": 134, "nauc_recall_at_100_std": 134, "nauc_recall_at_10_diff1": 134, "nauc_recall_at_10_max": 134, "nauc_recall_at_10_std": 134, "nauc_recall_at_1_diff1": 134, "nauc_recall_at_1_max": 134, "nauc_recall_at_1_std": 134, "nauc_recall_at_20_diff1": 134, "nauc_recall_at_20_max": 134, "nauc_recall_at_20_std": 134, "nauc_recall_at_3_diff1": 134, "nauc_recall_at_3_max": 134, "nauc_recall_at_3_std": 134, "nauc_recall_at_5_diff1": 134, "nauc_recall_at_5_max": 134, "nauc_recall_at_5_std": 134, "navig": 129, "nbit": [129, 130, 131], "ndarrai": [21, 22, 94, 95, 97, 98, 136], "ndcg": [135, 136], "ndcg_at_1": 134, "ndcg_at_10": [27, 32, 39, 42, 134], "ndcg_at_100": 134, "ndcg_at_1000": 134, "ndcg_at_20": 134, "ndcg_at_3": 134, "ndcg_at_5": 134, "ndcg_p": [125, 133], "ndcg_score": [125, 133, 138], "nearest": [128, 129, 130], "neat": 127, "need": [105, 111, 119, 120, 121, 122, 127, 128, 129, 131, 135, 136, 140, 142], "neftune_noise_alpha": 69, "neg": [11, 60, 65, 70, 77, 125, 133], "neg_scor": [10, 16], "negative_passag": 39, "negatives_cross_devic": [11, 60, 65, 69, 70, 77], "neighbor": [128, 129, 130, 131], "network": [110, 111, 119, 127], "neural": [110, 119, 127], "new": [24, 39, 111, 116, 117, 120, 135, 138, 140, 141], "new_data": 130, "new_id": 138, "new_scor": 138, "new_templ": 142, "new_text": 138, "next": [110, 112, 130, 134], "nfcorpu": [45, 134, 135], "ng": [110, 127], "ngpu": 128, "nine": 140, "nlist": [129, 130, 131], "nlp": [27, 45, 121, 134], "nn": [121, 124], "no_cuda": 69, "no_in_batch_neg_flag": [11, 70], "node": 129, "node_pars": 142, "non": 142, "none": [9, 10, 11, 13, 15, 16, 17, 19, 21, 22, 53, 54, 56, 58, 59, 60, 62, 65, 67, 69, 70, 71, 72, 76, 77, 79, 81, 82, 84, 87, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 111, 120, 121], "norm": [112, 122, 124], "normal": [21, 22, 60, 65, 70, 77, 94, 95, 97, 98, 99, 100, 101, 102, 112, 121, 122, 124, 125, 130, 133], "normalize_embed": [21, 60, 65, 69, 70, 77, 92, 94, 95, 97, 98, 119, 141], "note": [10, 59, 105, 110, 121, 129, 134, 135, 136, 138, 142], "notebook": [127, 128, 130, 131, 133, 135], "notic": 24, "notimplementederror": [21, 60, 61, 65, 70, 77, 97], "noun": 124, "now": [24, 110, 116, 121, 124, 127, 128, 129, 130, 134, 135, 138, 140, 141, 142], "nowadai": 106, "np": [21, 94, 95, 97, 98, 119, 125, 127, 128, 129, 130, 131, 133, 136, 138, 140], "nprob": [129, 131], "nprobe": [129, 131], "nq": [134, 135], "nqueri": 94, "nrespons": 58, "nsw": 129, "ntotal": [127, 133, 138, 140], "nuber": 129, "null": 134, "num": 70, "num_process": [10, 59], "num_train_epoch": 69, "num_work": [99, 100], "number": [10, 11, 21, 59, 94, 95, 97, 98, 99, 100, 101, 102, 125, 127, 129, 130, 133, 135, 136, 138, 141, 142], "numer": [106, 124], "numpi": [21, 22, 92, 94, 95, 97, 119, 121, 125, 127, 128, 129, 130, 131, 133, 138, 140], "nvidia": [127, 128, 129, 130, 131], "o": [114, 119, 122, 140, 141, 142], "o1": 69, "object": [10, 21, 22, 111, 128, 130, 133, 142], "obtain": 121, "obviou": 131, "ocnli": 136, "offer": 140, "offici": 119, "omakas": 140, "on_epoch_end": [0, 7, 8, 10], "onc": [109, 110, 127], "one": [21, 22, 107, 109, 110, 114, 119, 127, 130, 131, 134, 141, 142], "onli": [11, 13, 19, 21, 22, 32, 49, 50, 53, 54, 55, 56, 58, 60, 61, 65, 73, 76, 77, 78, 81, 82, 83, 84, 88, 89, 94, 97, 99, 100, 101, 102, 105, 110, 114, 119, 122, 124, 125, 127, 128, 129, 130, 135, 141, 142], "onlineshop": 136, "open": [35, 105, 134, 141, 142], "openai": [110, 127, 140, 141, 142], "openai_api_kei": [119, 140, 141, 142], "opposit": 124, "optim": [13, 19, 56, 62, 67, 69, 72, 79, 84, 89, 131], "optim_arg": 69, "optim_target_modul": 69, "optimizernam": 69, "optimum": 129, "option": [10, 11, 13, 17, 19, 21, 22, 54, 59, 60, 65, 70, 71, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 141, 142], "order": [110, 119, 125, 129, 133, 135], "org": 141, "origin": 130, "ortomar": 140, "osteoporosi": 111, "other": [110, 119, 127, 131, 133, 135], "otherwis": [11, 13, 19, 21, 22, 70, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 120, 127, 136], "our": [24, 27, 32, 35, 39, 42, 45, 105, 110, 112, 116, 117, 127, 131, 133, 134, 138, 140, 141, 142], "out": [16, 24, 60, 65, 70, 77, 110, 111, 112, 120, 133, 135, 138, 140], "out_featur": [121, 122], "outdoor": 140, "output": [11, 13, 17, 19, 21, 22, 54, 60, 65, 70, 77, 82, 87, 92, 94, 95, 97, 98, 112, 121, 122, 124, 138], "output_1": 122, "output_2": 122, "output_dir": [11, 17, 24, 27, 32, 35, 39, 42, 45, 60, 65, 69, 70, 77], "output_fold": [134, 135, 136], "output_path": [135, 136], "outstand": 111, "over": 120, "overcom": 119, "overlap": [141, 142], "overrid": [13, 19], "overwrit": [24, 27, 32, 35, 39, 42], "overwrite_output_dir": 69, "own": [119, 127], "p": [112, 121, 122, 124, 125, 133, 138], "p_embed": 120, "p_rep": [11, 60, 65, 70, 77, 98], "packag": [108, 119, 121, 122, 134, 135, 136, 140, 141, 142], "pad": [10, 16, 59, 60, 65, 70, 77, 121], "pad_to_multiple_of": [9, 10, 15, 16, 58, 59], "padding_idx": [121, 122], "paddingstrategi": [10, 16, 59], "page": [134, 135, 136, 141], "pain": 111, "pair": [16, 17, 22, 35, 39, 54, 82, 87, 98, 99, 100, 101, 102, 106, 135, 136, 138], "panda": 138, "panthera": 138, "paper": [112, 120, 141, 142], "paragraph": 39, "parallel": [119, 121], "paramet": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 54, 55, 59, 60, 61, 65, 70, 71, 77, 78, 82, 83, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 111, 112, 114, 120, 129, 130, 131, 138, 142], "parser": 142, "part": [120, 131, 133, 134, 140, 141, 142], "particular": 141, "particularli": 142, "partit": [129, 130], "pass": [13, 16, 17, 19, 82, 128, 136], "passag": [11, 21, 22, 42, 60, 65, 70, 77, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 109, 110, 111, 112, 120, 122, 124, 127, 133, 138, 140], "passage_instruction_for_rerank": [9, 22, 99, 100, 101, 102], "passage_instruction_for_retriev": [15, 58], "passage_instruction_format": [9, 15, 22, 58, 99, 100, 101, 102], "passage_max_len": [9, 10, 15, 16, 58, 59], "passage_max_length": [21, 94, 95, 97, 98], "passiv": 69, "past": [135, 136], "past_index": 69, "pasta": 140, "path": [10, 16, 21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 127, 133, 135, 136, 141], "path_to_model": 136, "pattern": 119, "pawsx": 136, "pdf": 141, "peft": [99, 100, 101], "peft_model_path": [53, 58], "peft_path": [99, 100, 101], "pelvic": 111, "peopl": [110, 117, 119, 127, 142], "pepperoni": 140, "per": [21, 22, 111, 130, 140], "per_device_eval_batch_s": 69, "per_device_train_batch_s": [10, 59, 69], "per_gpu_eval_batch_s": 69, "per_gpu_train_batch_s": 69, "perfect": 129, "perfectli": [125, 133], "perform": [11, 17, 21, 22, 24, 27, 32, 35, 39, 42, 45, 70, 82, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 106, 110, 111, 112, 114, 120, 121, 124, 125, 131, 133, 134, 135, 138, 142], "person": [110, 119], "peter": 124, "phase": [130, 131], "pho": 140, "phrase": [110, 119], "physic": 111, "pick": [100, 101], "pip": [110, 119, 120, 121, 122, 125, 127, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142], "pipelin": [45, 105, 107, 133, 134, 135, 138, 141, 142], "pitt": [110, 127], "pivot": 106, "pixel": 119, "pizza": 140, "place": 124, "plai": [106, 110, 119, 127, 133], "pleas": [105, 108, 112, 117, 135, 138, 140, 141], "plenti": 119, "point": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 111, 129], "pool": [21, 22, 60, 65, 70, 77, 91, 92, 94, 95, 96, 97, 98, 121], "pooler": [121, 122], "pooling_method": [92, 97, 98, 121, 136], "pop": [110, 127], "popular": [114, 129, 131, 135, 142], "portion": 119, "pos_scor": [10, 16], "posit": [105, 112, 125, 133, 138], "position_embed": [121, 122], "positive_passag": 39, "possess": 138, "possibl": [112, 119, 122, 125, 129, 133], "postur": 111, "potenti": 111, "pow": 124, "power": [110, 112, 119, 140, 141, 142], "pq": 130, "practic": [124, 125, 127], "pre": [54, 82, 87], "prec": 125, "precis": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 124, 135, 136, 138, 141], "precision_at_1": 134, "precision_at_10": 134, "precision_at_100": 134, "precision_at_1000": 134, "precision_at_20": 134, "precision_at_3": 134, "precision_at_5": 134, "pred": [110, 125, 133, 138], "pred_hard_encod": [125, 133, 138], "pred_hard_encodings_rerank": 138, "predict": [110, 125, 131, 133], "prediction_loss_onli": 69, "prefer": [24, 27, 32, 35, 39, 42, 45, 124, 129, 140], "prefix": 95, "pregnanc": 111, "premium": 140, "prepar": [16, 136], "preprocess": [129, 138], "preprocess_logits_for_metr": [13, 19, 56, 62, 67, 72, 79, 84, 89], "present": [105, 140], "preserv": 142, "pretrainedmodel": [13, 19, 54, 56, 62, 67, 72, 79, 82, 84, 87, 89], "pretrainedtoken": [10, 12, 16, 18, 55, 59, 61, 66, 71, 78, 83, 88], "pretrainedtokenizerbas": [10, 13, 16, 19, 56, 59, 62, 67, 72, 79, 84, 89], "pretti": [110, 131, 142], "previous": 138, "price": 140, "primal": 124, "print": [109, 110, 111, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 135, 138, 140, 141, 142], "prior": 142, "problem": [129, 142], "proce": 120, "process": [10, 11, 12, 18, 21, 22, 42, 59, 98, 105, 112, 124, 129, 133, 134, 135, 141], "process_index": [10, 59], "process_target_func": 21, "produc": [110, 127, 128], "product": [60, 65, 70, 77, 109, 110, 112, 119, 122, 129, 133], "productquant": 130, "profession": 111, "professor": [110, 127], "profici": 138, "program": 140, "project": [110, 112, 122, 127], "promot": 131, "prompt": [99, 100, 101, 140, 141, 142], "prompt_templ": 142, "prompttempl": 142, "promt": 142, "proper": 111, "propos": 112, "protein": 111, "provid": [21, 24, 27, 32, 35, 39, 42, 45, 70, 92, 93, 95, 97, 107, 111, 117, 119, 121, 128, 134, 135, 136, 140, 141, 143], "proxim": 129, "psg": 16, "pt": [10, 16, 59, 112, 121, 122, 133, 138], "public": [110, 127], "publish": [119, 120], "purpos": 111, "purpu": 119, "pursu": [110, 127], "push_back": 128, "push_to_hub": 69, "push_to_hub_model_id": 69, "push_to_hub_organ": 69, "push_to_hub_token": 69, "put": 141, "pypdf": 141, "pypdfload": 141, "python": [24, 27, 32, 35, 39, 42, 45], "pytorch": [127, 128, 129, 130, 131], "q": [39, 112, 122, 125, 127, 133, 141, 142], "q545186": 35, "q_embed": [120, 133, 138, 140], "q_mask": 70, "q_rep": [11, 60, 65, 70, 77, 98], "qa": [24, 120], "qa_recall_at_20": 35, "qbqtc": 136, "qr": 116, "qry": 16, "qry_encod": 16, "qt": [112, 122], "qt_8bit": [130, 131], "qtype": [130, 131], "qualiti": [110, 114, 119, 125, 129, 133, 140], "quantiz": [127, 129], "queri": [10, 11, 16, 17, 21, 22, 35, 39, 59, 60, 65, 70, 77, 82, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 110, 111, 112, 119, 120, 121, 122, 125, 128, 129, 130, 131, 133, 135, 136, 138, 140, 142], "queries_embed": 110, "query_embed": [110, 120, 127, 133, 138], "query_engin": 142, "query_id": 39, "query_instruction_for_rerank": [9, 22, 99, 100, 101, 102], "query_instruction_for_retriev": [15, 21, 58, 92, 94, 95, 97, 98, 109, 110, 120, 124, 127, 133, 136, 138, 140], "query_instruction_format": [9, 15, 21, 22, 58, 92, 94, 95, 97, 98, 99, 100, 101, 102], "query_max_len": [9, 10, 15, 16, 58, 59], "query_max_length": [21, 22, 94, 95, 97, 98, 99, 100, 101, 102], "query_s": [133, 138], "query_str": 142, "question": [35, 39, 42, 105, 116, 117, 120, 140, 141, 142], "queue": [21, 22], "quick": [107, 128, 130, 134], "quickli": [107, 117, 141], "quit": 105, "quoraretriev": [134, 135], "r": [128, 131, 135], "rag": [106, 107, 117], "rais": [10, 11, 16, 21, 22, 60, 61, 65, 70, 77, 92, 93, 97], "ram": 129, "ramen": 140, "randint": 124, "random": [10, 59, 128, 129, 130, 140], "randomli": 39, "rang": [45, 110, 119, 124, 125, 128, 131, 133, 134, 138], "rank": [45, 106, 114, 125, 133, 134, 135, 136], "rank_i": [125, 133], "rapper": [110, 127], "ratio": [101, 125, 138], "raw": [10, 59], "raw_model": 122, "raw_peft": [53, 58, 76, 81], "ray_scop": 69, "re": [111, 124, 125, 128, 131, 133, 140], "reach": 119, "read": [42, 142], "read_index": [127, 133], "reader": 142, "readi": [16, 141], "readm": [135, 136], "real": [42, 45, 105, 106, 124, 131, 134], "reason": [114, 120, 129], "recal": 131, "recall_at_1": 134, "recall_at_10": 134, "recall_at_100": [27, 32, 42, 134], "recall_at_1000": 134, "recall_at_20": 134, "recall_at_3": 134, "recall_at_5": 134, "recalls_init": 138, "recalls_rerank": 138, "receiv": [110, 127], "reciproc": [110, 125, 133], "recommend": [21, 22, 105, 136, 140], "recommended_act": 140, "record": [110, 127], "recursivecharactertextsplitt": 141, "red": 140, "redditclust": 135, "redditclusteringp2p": 135, "reduc": 130, "reduct": [130, 131], "refer": [105, 111, 135, 136, 140, 141, 142], "refin": 106, "refresh": [10, 135, 136], "refresh_epoch": [0, 7, 8, 10], "regress": [135, 136], "rel": [125, 131], "rel_i": [125, 133], "relat": [105, 111, 119, 120, 124, 128, 140, 141, 143], "relationship": [106, 119, 142], "relax": [135, 140], "releas": [32, 114, 115, 116, 119, 135], "relev": [32, 98, 99, 100, 101, 106, 109, 110, 111, 112, 120, 122, 124, 125, 127, 133, 135, 136, 138, 140], "reliabl": 140, "relu": [112, 122], "remov": [129, 135], "remove_unused_column": 69, "renown": [110, 127, 140], "repeat": [110, 135], "replac": 130, "replic": 128, "repo": [116, 117, 131, 141, 142, 143], "report_to": 69, "repositori": 108, "repres": [105, 106, 109, 110, 119, 120, 124, 125, 127, 133, 138, 140], "represent": [11, 60, 65, 70, 77, 112, 122, 130, 141], "reproduc": [119, 135], "reproduct": 133, "request": 131, "requir": [111, 121, 122, 128, 129, 140, 141, 142], "rerank": [0, 7, 9, 16, 17, 18, 19, 22, 24, 27, 32, 35, 39, 42, 49, 54, 55, 56, 76, 81, 82, 83, 84, 87, 88, 89, 91, 93, 99, 100, 101, 102, 107, 112, 117, 119, 122, 135, 136], "rerank_top_k": [24, 27, 32, 35, 39, 42], "reranker_max_length": [24, 27, 32, 35, 39, 42], "reranker_name_or_path": [24, 27, 32, 35, 39, 42], "rerankermodelargu": [49, 55, 73, 74, 75, 76, 80, 81, 83], "rerankermodelclass": 93, "rerankeroutput": [0, 7, 14, 19, 82], "rerpresent": 11, "res_id": [133, 138], "res_scor": [133, 138], "res_text": [133, 138], "research": [27, 35, 42, 117, 128, 135], "resid": 140, "resolut": 129, "resourc": [111, 117, 128, 135], "respect": [110, 112, 122], "respoect": 135, "respons": [95, 111, 119, 140, 141, 142], "response_synthes": 142, "restart": 128, "restaur": 140, "restore_callback_states_from_checkpoint": 69, "result": [21, 22, 99, 100, 101, 102, 105, 106, 110, 112, 119, 121, 122, 124, 125, 127, 129, 131, 133, 134, 135, 136, 138], "results_fold": [135, 136], "results_list": 21, "results_queu": [21, 22], "resume_from_checkpoint": 69, "retain": 122, "retreiv": 136, "retriev": [21, 24, 27, 32, 39, 42, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 107, 111, 114, 117, 119, 120, 125, 127, 134, 135, 136, 141, 143], "retrieval_task": 134, "retrieval_use_exampl": 58, "return": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 54, 55, 59, 60, 61, 65, 66, 70, 71, 77, 78, 82, 83, 87, 88, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 110, 120, 121, 122, 124, 125, 131, 133, 136, 138, 141, 142], "return_cobert_vec": 120, "return_colbert_vec": [70, 98, 112, 120, 122], "return_dens": [70, 98, 112, 120, 122], "return_dict": 121, "return_embed": 70, "return_output": [13, 19], "return_spars": [70, 98, 112, 120, 122], "return_sparse_embed": 70, "return_tensor": [10, 16, 59, 121], "revers": [110, 138], "revolution": [110, 127], "rgb": 119, "rice": 140, "rnage": 120, "rnn": 119, "robert": [110, 127], "roberta": [119, 120, 122, 138], "role": [106, 110, 127, 140], "root": [24, 27, 32, 35, 39, 42, 45], "rough": 110, "row": 127, "ru": 35, "run": [0, 7, 8, 12, 14, 18, 24, 27, 32, 35, 39, 42, 45, 49, 50, 51, 52, 55, 57, 61, 73, 74, 75, 78, 80, 83, 94, 95, 97, 98, 110, 117, 119, 120, 121, 127, 128, 130, 131, 133, 134, 136, 141, 143], "run_nam": 69, "runner": [0, 1, 49, 50, 51, 52, 57, 63, 64, 68, 73, 74, 75, 80, 85, 86], "s1": 124, "s2": 124, "s2p": 134, "s3": 124, "s_": [112, 122], "s_dens": 122, "s_lex_10_20": 122, "s_lex_10_21": 122, "s_mul_10_20": 122, "s_mul_10_21": 122, "s_rank_10_20": 122, "s_rank_10_21": 122, "sacrific": 129, "safe": [110, 127], "sai": 129, "sake": 127, "salad": 140, "sam": [110, 127], "same": [10, 106, 111, 114, 120, 121, 124, 129, 138], "same_dataset_within_batch": [15, 58, 61], "samedataset": [10, 59], "sampl": [10, 35, 39, 125, 133], "sandwich": 140, "saniti": [128, 129], "satisfactori": 131, "satisfi": [119, 128], "save": [0, 7, 8, 11, 14, 17, 49, 50, 51, 57, 60, 63, 64, 65, 68, 70, 73, 74, 75, 77, 133, 141], "save_loc": 141, "save_merged_lora_model": [53, 58, 76, 81], "save_on_each_nod": 69, "save_only_model": 69, "save_pretrain": [0, 7, 14, 17], "save_safetensor": 69, "save_step": 69, "save_strategi": 69, "save_total_limit": 69, "scalar": 11, "scalarquant": [130, 131], "scale": [11, 42, 45, 60, 65, 70, 77, 114, 120, 129, 134, 142], "scan": 116, "scenario": [105, 112, 122], "schedulertyp": 69, "scidoc": [134, 135], "scidocsrr": [45, 135], "scifact": [134, 135], "scikit": 125, "scope": [129, 138], "score": [10, 11, 17, 22, 54, 59, 60, 65, 70, 77, 82, 87, 98, 99, 100, 101, 102, 106, 110, 112, 119, 120, 121, 122, 124, 125, 129, 133, 134, 135, 136, 138], "scratch": 128, "script": [24, 27, 32, 35, 39, 42, 45], "se": 140, "seafood": 140, "seamlessli": 128, "search": [32, 105, 107, 109, 110, 111, 119, 120, 125, 127, 129, 130, 131, 133, 138, 140], "search_result": [24, 27, 32, 35, 39, 42, 45], "search_top_k": [24, 27, 32, 35, 39, 42], "searcher": [0, 1], "seat": 140, "second": [98, 131, 133], "section": [121, 124, 135, 143], "secur": 111, "see": [111, 121, 122, 124, 127, 128, 131, 134, 138, 140, 141, 142], "seed": [10, 59, 69, 128, 129, 130], "seen": [110, 129, 130], "select": [70, 101, 106, 114, 127, 128, 134, 138], "self": [11, 70, 99, 100, 101, 102, 121, 122, 136], "self_distill_start_step": [69, 70], "sell": [110, 127], "semant": [106, 110, 119, 135, 136], "sen1_vec": 119, "sen2_vec": 119, "sensit": 129, "sentenc": [21, 22, 60, 65, 70, 77, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 109, 110, 112, 114, 120, 122, 124, 127, 133, 135, 136, 138, 140], "sentence1": [119, 124], "sentence2": [119, 124], "sentence_1": 124, "sentence_2": 124, "sentence_3": 124, "sentence_embed": 121, "sentence_pair": [22, 98, 99, 100, 101, 102], "sentence_pooling_method": [60, 65, 69, 70, 77], "sentence_transform": [119, 134, 135, 136], "sentences_1": [112, 122], "sentences_2": [112, 122], "sentencesplitt": 142, "sentencetransform": [21, 22, 119, 134, 135, 136], "sentens": 124, "sep": [114, 121], "sep_token": 9, "separ": 16, "sequenti": 129, "seri": [110, 111, 114, 115, 119, 124, 127], "serv": [135, 136, 140], "set": [10, 11, 24, 32, 35, 39, 59, 71, 95, 105, 111, 112, 120, 122, 124, 125, 129, 131, 133, 135, 136, 138, 140, 142], "set1": 124, "set2": 124, "set_exampl": [91, 95, 96], "setup": [21, 22], "sever": [21, 22, 119, 124, 129], "sh": [24, 27, 32, 35, 39, 42, 45], "shanghai": 140, "shape": [110, 119, 121, 124, 127, 131, 133, 138, 140], "shard": 128, "share": [111, 120, 124], "she": 110, "shell": [24, 27, 32, 35, 39, 42, 45, 135, 136], "short": [105, 112, 120, 140], "shot": [95, 111], "should": [10, 21, 22, 59, 111, 124, 128, 134, 135, 136, 140], "show": [106, 110, 124, 125, 133, 134, 135, 141], "shrink": 129, "shrip": 140, "shuffl": [10, 16], "shuffle_ratio": [9, 15, 58], "sick": 135, "sift": 131, "sift1m": 131, "sigl": 114, "sigmoid": [99, 100, 101, 102], "signal": 119, "signific": 121, "significantli": 111, "sim": [112, 122], "sim_scor": 110, "similar": [60, 65, 70, 77, 106, 109, 111, 112, 114, 119, 120, 121, 122, 129, 130, 131, 135, 136, 138], "similarli": [119, 120], "simpl": [81, 105, 112, 114, 127, 141], "simpledirectoryread": 142, "simpli": [32, 35, 39, 42, 129, 138], "simultan": [112, 120], "sinc": [124, 133, 141], "sing": 35, "singer": [110, 127], "singl": [16, 21, 94, 95, 97, 98, 99, 100, 101, 105, 114, 121], "size": [10, 11, 17, 21, 22, 54, 59, 60, 65, 70, 77, 82, 87, 94, 95, 97, 98, 99, 100, 101, 102, 105, 111, 112, 114, 120, 121, 124, 128, 129, 130, 135, 136, 141, 142], "skip": 128, "skip_memory_metr": 69, "sklearn": [125, 133, 138], "slight": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 138], "slower": [129, 138], "small": [110, 114, 119, 120, 125, 129, 131, 138], "small_threshold": [15, 58], "smaller": [120, 122, 129, 130], "so": [119, 124, 127, 129, 130, 135, 140], "soft": 140, "softwar": 111, "solv": 142, "some": [105, 109, 117, 119, 125, 127, 129, 133, 140], "sometim": 138, "somewhat": 131, "songwrit": [110, 127], "soon": [135, 136], "soondubu": 140, "sophist": [119, 140], "sort": [110, 138], "sorted_indic": 110, "sota": [111, 119], "sourc": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 107, 121, 134, 141, 142], "space": [106, 119, 127, 128, 129, 130, 133, 138, 142], "span": [112, 120], "sparc": [70, 98, 112, 122], "spars": [70, 71, 98, 105, 106, 119, 120], "sparse_scor": 70, "sparse_weight": 70, "speaker": 32, "spearman": [135, 136], "speci": 138, "special": [112, 121, 122], "specif": [39, 99, 100, 101, 110, 120, 127, 141, 142], "specifi": [10, 21, 22, 60, 65, 70, 77, 98, 99, 100, 101, 102, 111, 142], "speed": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 120, 122, 127, 129, 130, 131, 138], "spend": 124, "spici": 140, "spinach": 140, "spinal": 111, "spirit": 140, "splade": 105, "split": [11, 24, 27, 32, 35, 39, 42, 60, 65, 70, 77, 124, 133, 136, 138, 141], "split_batch": 69, "split_docu": 141, "splitter": 141, "spread": [110, 127], "sprintduplicatequest": 135, "sqrt": 124, "st": [135, 136], "stackexchangeclust": 135, "stackexchangeclusteringp2p": 135, "stackoverflowdupquest": 135, "stage": [119, 138], "stand": [115, 120, 141, 142], "standard": [45, 134, 140], "standardgpuresourc": 128, "standout": 131, "stanford": [110, 127], "start": [21, 22, 70, 82, 105, 107, 117, 125, 135, 136], "start_lay": [81, 82], "start_multi_process_pool": [0, 20, 21, 22], "state": [10, 60, 65, 70, 77, 92, 97, 98, 111, 112, 121, 122], "static": [10, 11, 21, 22, 71, 95], "statist": 119, "steak": 140, "steakhous": 140, "stem": 111, "step": [69, 70, 119, 122, 124, 125, 128, 130, 135, 138, 140, 141], "stew": 140, "still": [110, 114, 131], "stop": [21, 22, 107], "stop_multi_process_pool": [0, 20, 21, 22], "storag": 142, "storage_context": 142, "storagecontext": 142, "store": [71, 127, 128, 129, 130, 133, 134, 135, 136, 138, 142], "str": [9, 10, 11, 13, 15, 16, 17, 19, 21, 22, 53, 56, 58, 59, 60, 62, 65, 67, 69, 70, 71, 72, 76, 77, 79, 81, 82, 84, 89, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 121, 136], "straightforward": 141, "strain": 111, "stream": 142, "stress": 111, "string": [21, 22], "strong": 138, "structur": [35, 121, 129, 136, 142], "sts12": 135, "sts13": 135, "sts14": 135, "sts15": 135, "sts16": 135, "sts17": 135, "sts22": 135, "stsb": 136, "stsbenchmark": 135, "student": 11, "student_scor": 11, "sub": [11, 60, 65, 70, 77, 130], "sub_batch_s": [10, 11, 59, 60, 65, 69, 70, 77], "subclass": [13, 19], "subquant": 130, "subsequ": 119, "subset": 134, "subtract": 124, "successfulli": 134, "suffer": [119, 129], "suffix": 95, "suggest": [131, 138, 140], "suitabl": 138, "sum": [121, 124, 133, 138], "sum_": [112, 122, 124, 125, 133], "summar": 135, "summari": 135, "summat": [112, 122], "summev": 135, "summit": 111, "sunni": [119, 138], "super": [110, 127], "support": [11, 61, 99, 100, 101, 105, 108, 112, 119, 120, 121, 122, 128, 129, 134, 135, 142], "suppos": [125, 140], "sure": [119, 121, 127, 128, 142], "surfac": 129, "surpris": 32, "surprisingli": 110, "sushi": 140, "sw": 32, "swift": [110, 127], "sy": [128, 131], "symptom": 111, "system": [110, 125, 128, 129, 130, 131, 133, 138, 140], "systemat": 119, "szechuan": 140, "t": [11, 35, 109, 110, 111, 112, 119, 120, 121, 122, 124, 125, 127, 133, 135, 138], "t2rerank": 136, "t2retriev": 136, "tabl": 138, "takayama": 140, "take": [10, 105, 106, 110, 117, 119, 124, 134, 135, 138], "tanh": [121, 122], "target": [11, 17, 21, 22, 60, 65, 70, 77], "target_devic": [21, 22], "target_modul": [53, 58, 76, 81], "task": [10, 21, 45, 92, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 110, 111, 114, 119, 120, 125, 133, 134, 135, 136, 142], "task_lang": 135, "task_list_clust": 135, "task_nam": 134, "task_typ": 24, "tast": 140, "taylor": [110, 127], "te": 32, "tea": 140, "teach": 117, "teacher": [10, 11, 17, 59, 70, 82], "teacher_scor": [11, 17, 70, 82], "teacher_target": 11, "teatur": [17, 82], "techniqu": [117, 119, 129, 140, 142], "technologi": 111, "tell": [124, 133], "temp_dataset": 10, "temperatur": [11, 60, 65, 69, 70, 77], "templat": [21, 22, 92, 94, 95, 97, 98, 99, 100, 101, 102, 141, 142], "temporari": 128, "tensor": [11, 13, 17, 19, 21, 54, 56, 60, 62, 65, 67, 70, 72, 77, 79, 82, 84, 87, 89, 92, 94, 95, 97, 98, 121, 124, 136], "term": [112, 122], "terribl": 129, "test": [24, 27, 35, 39, 105, 120, 131, 134, 135, 136], "text": [10, 16, 21, 22, 35, 39, 45, 54, 70, 82, 87, 95, 105, 106, 112, 114, 119, 120, 122, 125, 130, 133, 134, 135, 136, 138], "text_input": 70, "text_qa_templ": 142, "text_splitt": 141, "textbf": [125, 133], "textual": [135, 136], "tf": 119, "tf32": 69, "th": [32, 112, 122, 125, 133], "thai": 140, "than": [105, 106, 110, 112, 119, 120, 124, 131], "thei": [32, 106, 111, 114, 119, 121, 125, 128, 133, 135], "them": [39, 105, 106, 110, 112, 119, 121, 122, 124, 127, 128, 129, 130, 141], "theme": 140, "themselv": 140, "therefor": 121, "theta": 124, "thi": [10, 21, 22, 24, 59, 109, 110, 111, 112, 117, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143], "thing": 141, "those": [110, 129], "thousand": 127, "three": [70, 112, 119, 120, 128, 133], "thrid": 133, "through": [106, 114, 120, 121, 127, 128, 129, 133, 135, 136, 138, 142], "thu": [106, 110, 124, 129, 130, 131, 138, 141], "thunewsclusteringp2p": 136, "thunewsclusterings2": 136, "tiger": 138, "tigri": 138, "time": [105, 106, 110, 114, 119, 122, 125, 127, 128, 129, 131, 133, 135, 136, 138], "tini": [110, 127, 131], "tip": 117, "tnew": 136, "todai": [119, 138], "tofu": 140, "togeth": [21, 22, 121], "token": [9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 76, 77, 78, 79, 81, 82, 83, 84, 87, 88, 89, 94, 95, 97, 98, 99, 100, 101, 102, 105, 112, 119, 120, 121, 122, 136], "token_type_embed": [121, 122], "token_type_id": 121, "tokenizer_nam": [9, 15, 53, 58, 69, 76, 81], "tokenzi": 59, "tom": 140, "tonight": 124, "too": 129, "tool": 120, "toolkit": 107, "top": [106, 111, 125, 130, 133, 135, 136, 138, 142], "topic": [32, 117, 143], "torch": [11, 13, 17, 19, 21, 54, 60, 65, 70, 77, 87, 92, 94, 95, 97, 98, 121, 122, 124], "torch_compil": 69, "torch_compile_backend": 69, "torch_compile_mod": 69, "torch_empty_cache_step": 69, "torchdynamo": 69, "total": [10, 59, 125, 127, 128, 131, 133, 138], "totoal": 125, "touche2020": [134, 135], "toxicconversationsclassif": 135, "tpu_metrics_debug": 69, "tpu_num_cor": 69, "tqdm": [133, 138], "tract": 111, "tradeoff": [131, 138], "tradit": [119, 140], "traffic": 111, "train": [10, 11, 12, 13, 16, 17, 18, 19, 24, 32, 39, 54, 60, 61, 65, 69, 70, 71, 77, 82, 87, 105, 111, 112, 119, 121, 127, 129, 130, 131, 133, 135, 136, 138, 141], "train_batch_s": [17, 54, 82, 87], "train_data": [9, 15, 58], "train_dataset": [10, 13, 19, 56, 62, 67, 72, 79, 84, 89], "train_group_s": [9, 15, 58], "trainer": [12, 13, 18, 19, 49, 50, 51, 52, 55, 57, 61, 63, 64, 66, 68, 71, 73, 74, 75, 78, 80, 83, 85, 86, 88], "trainer_util": 69, "trainercallback": [13, 19, 56, 62, 67, 72, 79, 84, 89], "trainercontrol": 10, "trainerst": 10, "training_arg": [10, 12, 18, 55, 59, 61, 66, 69, 71, 78, 83, 88], "trainingargu": [13, 19, 56, 62, 67, 72, 79, 84, 89], "transform": [21, 22, 69, 106, 121, 122, 129, 130], "transpar": 119, "treatment": 111, "treccovid": [134, 135], "tri": [21, 22, 71, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "true": [10, 11, 13, 16, 19, 21, 22, 27, 42, 53, 58, 59, 60, 65, 69, 70, 76, 77, 81, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 109, 110, 112, 119, 120, 121, 122, 124, 125, 127, 133, 138, 140, 141], "truncat": [121, 133], "trust_remote_cod": [9, 15, 53, 58, 69, 71, 76, 81, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "truth": [110, 125, 131, 133, 138], "try": [105, 129, 133, 138], "tune": [12, 18, 107, 112, 120, 135], "tup": 138, "tupl": [12, 13, 16, 18, 19, 22, 55, 56, 61, 62, 66, 67, 71, 72, 78, 79, 83, 84, 88, 89, 98, 99, 100, 101, 102], "ture": [110, 127], "tutori": [105, 110, 112, 114, 117, 125, 127, 128, 129, 131, 133, 134, 135, 136, 138, 140, 141, 142], "tweetsentimentextractionclassif": 135, "twentynewsgroupsclust": 135, "twittersemeval2015": 135, "twitterurlcorpu": 135, "two": [24, 98, 106, 111, 112, 119, 121, 122, 124, 125, 128, 129, 131, 133], "type": [10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 35, 53, 54, 55, 58, 59, 60, 61, 65, 66, 69, 70, 71, 76, 77, 78, 81, 82, 83, 87, 88, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 124, 127, 130, 133, 138, 142], "typic": [106, 140, 141], "typolog": [35, 39], "u": [108, 110, 116, 119, 120, 121, 122, 124, 127, 131, 133, 138, 140, 141, 142], "u270": 140, "unbalanc": [105, 112], "uncom": [127, 133], "under": 142, "underli": [54, 82, 87], "unfamiliar": 117, "unicoil": 105, "unifi": 120, "unified_finetun": [69, 70], "union": [11, 13, 17, 19, 21, 22, 60, 65, 70, 77, 82, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 124], "univers": [110, 127], "unsqueez": 121, "unsupport": 21, "up": [21, 22, 92, 93, 94, 97, 98, 99, 100, 101, 102, 105, 112, 120, 122, 129, 135, 138, 140], "updat": [24, 116, 127, 128, 135], "update_prompt": 142, "upon": [110, 127], "uptown": 140, "urinari": 111, "urllib": 131, "urlretriev": 131, "us": [10, 11, 16, 17, 21, 22, 27, 39, 42, 54, 59, 60, 65, 70, 71, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 109, 110, 111, 112, 114, 117, 119, 120, 121, 122, 124, 125, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142], "usag": [119, 120, 127, 128, 129, 130, 131, 134, 141], "use_bf16": [99, 100, 101], "use_cpu": 69, "use_dataload": [99, 100], "use_flash_attn": [53, 58, 76, 81], "use_fp16": [21, 22, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 109, 110, 120, 122, 124, 127, 133, 138, 140], "use_ipex": 69, "use_legacy_prediction_loop": 69, "use_lora": [53, 58, 76, 81], "use_mps_devic": 69, "use_self_distil": [69, 70], "use_slow_token": [53, 58], "user": [128, 131, 140, 142], "user_input": 140, "usual": [106, 125, 130, 138], "util": [111, 112, 122], "v": [112, 122, 135, 136], "v1": [27, 42, 45, 105, 109, 110, 112, 115, 119, 121, 124, 127, 133, 134, 135, 136, 138, 140, 141, 142], "v2": [24, 27, 32, 35, 39, 42, 119, 136, 138], "valu": [11, 17, 60, 65, 70, 77, 112, 120, 121, 122, 124, 125, 129], "valueerror": [10, 11, 16, 21, 22, 70, 92, 93], "var": [92, 93], "vari": [112, 122], "variabl": [135, 136], "varieti": [45, 134, 140], "variou": [45, 111, 119, 134], "vast": 106, "vdev": 128, "ve": [110, 124, 134, 136], "vector": [21, 60, 65, 70, 77, 92, 94, 95, 97, 98, 105, 106, 110, 114, 119, 120, 121, 124, 127, 128, 129, 130, 131, 133, 138, 140, 141, 142], "vector_stor": 142, "vectordb": 141, "vectorstor": 141, "vectorstoreindex": 142, "veget": 140, "verb": 124, "veri": [106, 110, 119, 120, 124, 127, 128, 129, 131, 135, 141, 142], "versatil": [110, 112, 120, 127, 141], "version": [24, 108, 114, 120, 122, 128, 135, 141], "via": [21, 22, 110, 122, 127], "videoretriev": 136, "vietnam": 140, "vietnames": 140, "view": 124, "virtual": [111, 127, 128], "visibl": 114, "vision": [110, 127], "visit": [116, 117, 129], "vo": 119, "vocabulari": 105, "voic": [110, 127], "voronoi": 129, "voyage_api_kei": 119, "voyageai": 119, "vram": 128, "vre": 128, "w_": [112, 122], "w_1": [112, 122], "w_2": [112, 122], "w_3": [112, 122], "wa": [110, 112, 114, 127], "wai": [70, 98, 105, 110, 119, 124, 128, 129, 130], "waimai": 136, "wait": 135, "walk": [120, 133], "wall": [128, 131], "want": [21, 22, 108, 110, 117, 127, 129, 133, 135, 140, 141, 142], "warmup_ratio": 69, "warmup_step": 69, "warn": 69, "watch": [119, 124], "wave": 119, "we": [39, 105, 106, 107, 109, 110, 112, 116, 117, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142, 143], "web": 111, "websit": 136, "wechat": 116, "week": 111, "weight": [70, 98, 101, 105, 112, 120, 122], "weight_decai": 69, "weights_for_different_mod": 98, "welcom": 117, "well": [45, 110, 114, 125, 129, 134, 138, 140, 141, 142], "went": 128, "were": [114, 119], "what": [110, 111, 112, 120, 122, 124, 129, 138, 141, 142], "when": [11, 22, 71, 94, 95, 97, 98, 105, 125, 128, 129, 130, 131, 133, 135, 142], "where": [112, 122, 125, 127, 129, 133, 140, 141], "wherea": 106, "whether": [105, 125, 128], "which": [11, 21, 22, 45, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 106, 110, 114, 115, 120, 122, 124, 125, 127, 129, 134, 135, 136, 138, 140, 141, 142], "while": [110, 112, 119, 124, 128, 129, 142], "who": [32, 35, 110, 127], "whole": [45, 121, 127, 129, 133, 134, 135, 141], "why": [105, 129, 131], "wide": [27, 42, 45, 106, 110, 125, 129, 131, 133, 134, 135], "wikipedia": 39, "wikipeida": 39, "win": [110, 127], "wine": 140, "within": [112, 119, 122, 125, 135, 136, 142], "without": [108, 111, 112, 114, 120, 129, 140, 141], "women": 111, "won": 110, "wonder": [124, 140], "wood": 140, "word": [106, 112, 119, 122, 133], "word2vec": [106, 119], "word_embed": [121, 122], "work": [21, 22, 105, 110, 112, 120, 127, 129, 138], "worker": [99, 100], "world": [42, 45, 106, 114, 129, 134, 142], "would": [119, 133, 134, 141, 142], "wrapper": 16, "write": [125, 141], "write_index": [127, 133], "written": 135, "wrote": 121, "wsdm": 32, "wudao": 39, "x": [24, 27, 32, 35, 39, 42, 45, 121, 122], "x86_64": [128, 129, 130, 131], "xlm": [120, 122, 138], "xlmrobertaattent": 122, "xlmrobertaembed": 122, "xlmrobertaencod": 122, "xlmrobertaintermedi": 122, "xlmrobertalay": 122, "xlmrobertamodel": 122, "xlmrobertaoutput": 122, "xlmrobertapool": 122, "xlmrobertaselfattent": 122, "xlmrobertaselfoutput": 122, "yi": 140, "yichiran": 140, "yo": 32, "york": 140, "you": [21, 22, 24, 27, 32, 35, 39, 42, 45, 99, 100, 101, 105, 108, 109, 111, 117, 119, 120, 121, 122, 124, 127, 128, 131, 133, 134, 135, 136, 138, 140, 141, 142], "your": [24, 27, 32, 35, 39, 42, 45, 105, 119, 120, 121, 122, 127, 128, 131, 133, 134, 135, 136, 140, 141, 142], "your_api_kei": [119, 140, 141, 142], "your_existing_readm": 135, "yum": 140, "zero": [105, 125, 133, 138], "zh": [39, 114, 120, 136], "zh_cn": 35, "zh_result": 136, "zip": [110, 124, 125, 128, 133, 138], "\u0434\u044d\u0439\u0432": 35, "\u043a\u0442\u043e": 35, "\u043f\u043e\u0435\u0442": 35, "\u044d\u0434\u043c\u0443\u043d\u0434\u0441": 35, "\u306f\u8ab0\u304c\u6b4c\u3063\u3066\u3044\u307e\u3059\u304b": 35, "\u30a8\u30c9\u30e2\u30f3\u30ba": 35, "\u30c7\u30a4\u30d6": 35, "\u30c7\u30a4\u30f4": 35, "\u30c7\u30fc\u30d6": 35, "\u4e3a\u8fd9\u4e2a\u53e5\u5b50\u751f\u6210\u8868\u793a\u4ee5\u7528\u4e8e\u68c0\u7d22\u76f8\u5173\u6587\u7ae0": 136, "\u57c3\u5fb7\u8499\u5179": 35, "\u6234\u7ef4": 35, "\u662f\u8c01\u6f14\u5531\u7684": 35}, "titles": ["Abstract Class", "Evaluation", "Arguments", "dataset loader", "Evaluator", "runner", "searcher", "Finetune", "Embedder", "AbsArguments", "AbsDataset", "AbsModeling", "AbsRunner", "AbsTrainer", "Reranker", "AbsArguments", "AbsDataset", "AbsModeling", "AbsRunner", "AbsTrainer", "Inference", "AbsEmbedder", "AbsReranker", "Evaluation", "AIR-Bench", "arguments", "runner", "BEIR", "arguments", "data loader", "evaluator", "runner", "MIRACL", "data_loader", "runner", "MKQA", "data_loader", "evaluator", "runner", "MLDR", "data_loader", "runner", "MSMARCO", "data_loader", "runner", "MTEB", "arguments", "runner", "searcher", "Finetune", "Embedder", "Decoder Only", "Base", "Arguments", "Modeling", "Runner", "Trainer", "ICL", "Arguments", "Dataset", "Modeling", "Runner", "Trainer", "Encoder Only", "Base", "Modeling", "Runner", "Trainer", "M3", "Arguments", "Modeling", "Runner", "Trainer", "Reranker", "Decoder Only", "Base", "Arguments", "Modeling", "Runner", "Trainer", "Layerwise", "Arguments", "Modeling", "Runner", "Trainer", "Encoder Only", "Base", "Modeling", "Runner", "Trainer", "API", "Inference", "FlagAutoModel", "FlagAutoReranker", "BaseEmbedder", "ICLLLMEmbedder", "Embedder", "BaseEmbedder", "M3Embedder", "BaseLLMReranker", "LayerWiseLLMReranker", "LightweightLLMReranker", "BaseReranker", "Reranker", "&lt;no title&gt;", "FAQ", "Concept", "Introduction", "Installation", "Quick Start", "Retrieval Demo", "BGE-EN-ICL", "BGE-M3", "BGE-Reranker", "BGE v1 &amp; v1.5", "BGE", "Community", "BGE", "1. Embedding", "Intro to Embedding", "BGE Series", "BGE Explanation", "BGE-M3", "2. Metrics", "Similarity", "Evaluation Metrics", "3. Indexing", "Indexing Using Faiss", "Faiss GPU", "Faiss Indexes", "Faiss Quantizers", "Choosing Index", "4. Evaluation", "Evaluation", "MTEB", "MTEB Leaderboard", "C-MTEB", "5. Reranking", "Reranker", "6. RAG", "Simple RAG From Scratch", "RAG with LangChain", "RAG with LlamaIndex", "Tutorials"], "titleterms": {"0": [110, 121, 122, 125, 127, 131, 133, 134, 135, 136, 138, 140, 141, 142], "1": [110, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 140, 141, 142], "2": [110, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 136, 138, 140, 141, 142], "3": [110, 120, 122, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 138, 140, 141, 142], "4": [110, 120, 122, 124, 125, 127, 128, 129, 131, 132, 133, 135, 136, 138], "5": [114, 120, 124, 125, 127, 128, 131, 133, 137, 138], "6": [131, 138, 139], "absargu": [9, 15], "absdataset": [10, 16], "absembedd": 21, "absembeddercol": 10, "absembeddermodel": 11, "absembeddersamedatasetcol": [10, 59], "absembeddersamedatasettraindataset": 10, "absembeddertrain": [12, 13], "absembeddertraindataset": 10, "absllmrerankercol": 16, "absllmrerankertraindataset": 16, "absmodel": [11, 17], "absrerank": 22, "absrerankercol": 16, "absrerankermodel": 17, "absrerankertrain": [18, 19], "absrerankertraindataset": 16, "absrunn": [12, 18], "abstract": 0, "abstrain": [13, 19], "ai": 119, "air": 24, "all": 128, "answer": 127, "api": 90, "approach": 124, "argument": [2, 25, 28, 46, 53, 58, 69, 76, 81], "avail": 128, "baai": 120, "background": 119, "base": [52, 64, 75, 86], "baseembedd": [94, 97], "basellmrerank": 99, "basererank": 102, "beir": 27, "bench": 24, "bge": [111, 112, 113, 114, 115, 117, 119, 120, 121, 122], "build": 128, "c": 136, "calcul": 110, "call": 124, "choos": 131, "class": 0, "commerci": 119, "commun": 116, "comparison": 121, "concept": 106, "cosin": 124, "cpu": [127, 128], "creat": 128, "cuda": 108, "data": [29, 128, 140, 141, 142], "data_load": [33, 36, 40, 43], "dataset": [3, 59, 127, 131, 133, 136, 138], "decod": [51, 74], "decoderonlyembeddericlsamedatasettraindataset": 59, "demo": 110, "dens": [112, 122], "distanc": 124, "dot": 124, "embed": [110, 118, 119, 120, 127, 133, 138], "embedd": [8, 50, 96, 106, 115, 120], "embedderoutput": 11, "embeddertrainercallbackfordatarefresh": 10, "en": 111, "encod": [63, 85, 121], "encoderonlyembedderm3model": 70, "encoderonlyembedderm3modelforinfer": 70, "euclidean": 124, "evaldenseretriev": 6, "evalrerank": 6, "evalretriev": 6, "evalu": [1, 4, 23, 30, 37, 110, 125, 132, 133, 135, 136, 138], "exampl": [124, 129], "explan": 121, "faiss": [127, 128, 129, 130], "faq": 105, "find": 127, "finetun": [7, 49], "flagautomodel": 92, "flagautorerank": 93, "flat": 131, "from": [108, 140], "function": [112, 122, 124, 131], "futur": 135, "gener": [120, 140, 141, 142], "get": 119, "gpu": [127, 128], "granular": 112, "helper": 131, "hnsw": 131, "hybrid": [112, 122], "icl": [57, 111], "iclllmembedd": 95, "implement": 124, "index": [126, 127, 128, 129, 130, 131, 133, 138, 140, 141, 142], "indexflat": 129, "indexhnsw": 129, "indexivf": 129, "indexlsh": 129, "infer": [20, 91], "inner": 124, "instal": [108, 121, 122, 128, 134, 135, 136], "intro": [119, 129, 134], "introduct": 107, "ivf": [130, 131], "jaccard": 124, "langchain": 141, "layerwis": 80, "layerwisellmrerank": 100, "leaderboard": [135, 136], "lightweightllmrerank": 101, "lingual": 112, "linux": 127, "llamaindex": 142, "llm": 120, "load": 133, "loader": [3, 29], "lsh": 131, "m3": [68, 112, 120, 122], "m3embedd": 98, "map": 125, "maximum": 124, "method": [3, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 33, 36, 40, 43, 54, 59, 60, 65, 70, 77, 82, 87, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102], "metric": [123, 125], "miracl": 32, "mkqa": 35, "mldr": 39, "model": [54, 60, 65, 70, 77, 82, 87, 119, 120, 136], "mrr": [125, 133, 138], "msmarco": 42, "mteb": [45, 134, 135, 136], "multi": [112, 122], "multipl": 128, "naiv": 124, "ndcg": [125, 133, 138], "onli": [51, 63, 74, 85], "open": 119, "openai": 119, "option": [127, 128], "packag": 131, "partial": 135, "pip": 108, "precis": 125, "prepar": [110, 125, 128, 129, 130, 131, 140, 141, 142], "product": [124, 130, 131], "pytorch": [108, 124], "quantiz": [130, 131], "queri": 127, "quick": 109, "rag": [139, 140, 141, 142], "rank": [110, 112, 122], "recal": [125, 133, 138], "relationship": 124, "rerank": [14, 73, 103, 106, 113, 137, 138], "rerankeroutput": 17, "result": 128, "retreiv": 141, "retriev": [110, 112, 122, 133, 138, 140, 142], "run": 135, "runner": [5, 26, 31, 34, 38, 41, 44, 47, 55, 61, 66, 71, 78, 83, 88], "save": 127, "scalar": [130, 131], "scratch": 140, "search": [124, 128], "searcher": [6, 48], "sentenc": [119, 121], "seri": 120, "setup": [127, 133, 138], "shortag": 129, "similar": [110, 124], "simpl": 140, "singl": 128, "sourc": [108, 119], "spars": [112, 122], "start": 109, "step": [110, 127, 133], "structur": 122, "submit": [135, 136], "text": [110, 127], "tradeoff": 129, "trainer": [56, 62, 67, 72, 79, 84, 89], "transform": 119, "tutori": 143, "us": [108, 127], "usag": [111, 112, 114], "v1": [114, 120], "vector": [112, 122], "voyag": 119, "work": 135, "x86_64": 127}})